
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Song
 * 
 */
export type Song = $Result.DefaultSelection<Prisma.$SongPayload>
/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model Artist
 * 
 */
export type Artist = $Result.DefaultSelection<Prisma.$ArtistPayload>
/**
 * Model ListenLog
 * 
 */
export type ListenLog = $Result.DefaultSelection<Prisma.$ListenLogPayload>
/**
 * Model AlbumArtist
 * 
 */
export type AlbumArtist = $Result.DefaultSelection<Prisma.$AlbumArtistPayload>
/**
 * Model SongArtist
 * 
 */
export type SongArtist = $Result.DefaultSelection<Prisma.$SongArtistPayload>
/**
 * Model Follow
 * 
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.song`: Exposes CRUD operations for the **Song** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Songs
    * const songs = await prisma.song.findMany()
    * ```
    */
  get song(): Prisma.SongDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.artist`: Exposes CRUD operations for the **Artist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artists
    * const artists = await prisma.artist.findMany()
    * ```
    */
  get artist(): Prisma.ArtistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.listenLog`: Exposes CRUD operations for the **ListenLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ListenLogs
    * const listenLogs = await prisma.listenLog.findMany()
    * ```
    */
  get listenLog(): Prisma.ListenLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.albumArtist`: Exposes CRUD operations for the **AlbumArtist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlbumArtists
    * const albumArtists = await prisma.albumArtist.findMany()
    * ```
    */
  get albumArtist(): Prisma.AlbumArtistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.songArtist`: Exposes CRUD operations for the **SongArtist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SongArtists
    * const songArtists = await prisma.songArtist.findMany()
    * ```
    */
  get songArtist(): Prisma.SongArtistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Song: 'Song',
    Album: 'Album',
    Artist: 'Artist',
    ListenLog: 'ListenLog',
    AlbumArtist: 'AlbumArtist',
    SongArtist: 'SongArtist',
    Follow: 'Follow'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "song" | "album" | "artist" | "listenLog" | "albumArtist" | "songArtist" | "follow"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Song: {
        payload: Prisma.$SongPayload<ExtArgs>
        fields: Prisma.SongFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SongFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SongFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          findFirst: {
            args: Prisma.SongFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SongFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          findMany: {
            args: Prisma.SongFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>[]
          }
          create: {
            args: Prisma.SongCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          createMany: {
            args: Prisma.SongCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SongDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          update: {
            args: Prisma.SongUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          deleteMany: {
            args: Prisma.SongDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SongUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SongUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          aggregate: {
            args: Prisma.SongAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSong>
          }
          groupBy: {
            args: Prisma.SongGroupByArgs<ExtArgs>
            result: $Utils.Optional<SongGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SongFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SongAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SongCountArgs<ExtArgs>
            result: $Utils.Optional<SongCountAggregateOutputType> | number
          }
        }
      }
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AlbumFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AlbumAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      Artist: {
        payload: Prisma.$ArtistPayload<ExtArgs>
        fields: Prisma.ArtistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          findFirst: {
            args: Prisma.ArtistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          findMany: {
            args: Prisma.ArtistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>[]
          }
          create: {
            args: Prisma.ArtistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          createMany: {
            args: Prisma.ArtistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArtistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          update: {
            args: Prisma.ArtistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          deleteMany: {
            args: Prisma.ArtistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArtistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArtistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          aggregate: {
            args: Prisma.ArtistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArtist>
          }
          groupBy: {
            args: Prisma.ArtistGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtistGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ArtistFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ArtistAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ArtistCountArgs<ExtArgs>
            result: $Utils.Optional<ArtistCountAggregateOutputType> | number
          }
        }
      }
      ListenLog: {
        payload: Prisma.$ListenLogPayload<ExtArgs>
        fields: Prisma.ListenLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListenLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListenLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>
          }
          findFirst: {
            args: Prisma.ListenLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListenLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>
          }
          findMany: {
            args: Prisma.ListenLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>[]
          }
          create: {
            args: Prisma.ListenLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>
          }
          createMany: {
            args: Prisma.ListenLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ListenLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>
          }
          update: {
            args: Prisma.ListenLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>
          }
          deleteMany: {
            args: Prisma.ListenLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListenLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ListenLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListenLogPayload>
          }
          aggregate: {
            args: Prisma.ListenLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListenLog>
          }
          groupBy: {
            args: Prisma.ListenLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListenLogGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ListenLogFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ListenLogAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ListenLogCountArgs<ExtArgs>
            result: $Utils.Optional<ListenLogCountAggregateOutputType> | number
          }
        }
      }
      AlbumArtist: {
        payload: Prisma.$AlbumArtistPayload<ExtArgs>
        fields: Prisma.AlbumArtistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumArtistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumArtistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>
          }
          findFirst: {
            args: Prisma.AlbumArtistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumArtistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>
          }
          findMany: {
            args: Prisma.AlbumArtistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>[]
          }
          create: {
            args: Prisma.AlbumArtistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>
          }
          createMany: {
            args: Prisma.AlbumArtistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlbumArtistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>
          }
          update: {
            args: Prisma.AlbumArtistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>
          }
          deleteMany: {
            args: Prisma.AlbumArtistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumArtistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlbumArtistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumArtistPayload>
          }
          aggregate: {
            args: Prisma.AlbumArtistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbumArtist>
          }
          groupBy: {
            args: Prisma.AlbumArtistGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumArtistGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AlbumArtistFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AlbumArtistAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AlbumArtistCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumArtistCountAggregateOutputType> | number
          }
        }
      }
      SongArtist: {
        payload: Prisma.$SongArtistPayload<ExtArgs>
        fields: Prisma.SongArtistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SongArtistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SongArtistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>
          }
          findFirst: {
            args: Prisma.SongArtistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SongArtistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>
          }
          findMany: {
            args: Prisma.SongArtistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>[]
          }
          create: {
            args: Prisma.SongArtistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>
          }
          createMany: {
            args: Prisma.SongArtistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SongArtistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>
          }
          update: {
            args: Prisma.SongArtistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>
          }
          deleteMany: {
            args: Prisma.SongArtistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SongArtistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SongArtistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongArtistPayload>
          }
          aggregate: {
            args: Prisma.SongArtistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSongArtist>
          }
          groupBy: {
            args: Prisma.SongArtistGroupByArgs<ExtArgs>
            result: $Utils.Optional<SongArtistGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SongArtistFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SongArtistAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SongArtistCountArgs<ExtArgs>
            result: $Utils.Optional<SongArtistCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.FollowFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.FollowAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    song?: SongOmit
    album?: AlbumOmit
    artist?: ArtistOmit
    listenLog?: ListenLogOmit
    albumArtist?: AlbumArtistOmit
    songArtist?: SongArtistOmit
    follow?: FollowOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    listenLogs: number
    follows: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listenLogs?: boolean | UserCountOutputTypeCountListenLogsArgs
    follows?: boolean | UserCountOutputTypeCountFollowsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountListenLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListenLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }


  /**
   * Count Type SongCountOutputType
   */

  export type SongCountOutputType = {
    songArtists: number
    listenLogs: number
  }

  export type SongCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songArtists?: boolean | SongCountOutputTypeCountSongArtistsArgs
    listenLogs?: boolean | SongCountOutputTypeCountListenLogsArgs
  }

  // Custom InputTypes
  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongCountOutputType
     */
    select?: SongCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeCountSongArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongArtistWhereInput
  }

  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeCountListenLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListenLogWhereInput
  }


  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    tracks: number
    albumArtists: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracks?: boolean | AlbumCountOutputTypeCountTracksArgs
    albumArtists?: boolean | AlbumCountOutputTypeCountAlbumArtistsArgs
  }

  // Custom InputTypes
  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountTracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongWhereInput
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountAlbumArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumArtistWhereInput
  }


  /**
   * Count Type ArtistCountOutputType
   */

  export type ArtistCountOutputType = {
    songArtists: number
    albumArtists: number
    followedBy: number
  }

  export type ArtistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songArtists?: boolean | ArtistCountOutputTypeCountSongArtistsArgs
    albumArtists?: boolean | ArtistCountOutputTypeCountAlbumArtistsArgs
    followedBy?: boolean | ArtistCountOutputTypeCountFollowedByArgs
  }

  // Custom InputTypes
  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtistCountOutputType
     */
    select?: ArtistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeCountSongArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongArtistWhereInput
  }

  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeCountAlbumArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumArtistWhereInput
  }

  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeCountFollowedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    followedArtists: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    followedArtists?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    followedArtists: string[]
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    followedArtists?: boolean
    listenLogs?: boolean | User$listenLogsArgs<ExtArgs>
    follows?: boolean | User$followsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    followedArtists?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "followedArtists", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    listenLogs?: boolean | User$listenLogsArgs<ExtArgs>
    follows?: boolean | User$followsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      listenLogs: Prisma.$ListenLogPayload<ExtArgs>[]
      follows: Prisma.$FollowPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      followedArtists: string[]
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    listenLogs<T extends User$listenLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$listenLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    follows<T extends User$followsArgs<ExtArgs> = {}>(args?: Subset<T, User$followsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly followedArtists: FieldRef<"User", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.listenLogs
   */
  export type User$listenLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    where?: ListenLogWhereInput
    orderBy?: ListenLogOrderByWithRelationInput | ListenLogOrderByWithRelationInput[]
    cursor?: ListenLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListenLogScalarFieldEnum | ListenLogScalarFieldEnum[]
  }

  /**
   * User.follows
   */
  export type User$followsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Song
   */

  export type AggregateSong = {
    _count: SongCountAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  export type SongMinAggregateOutputType = {
    id: string | null
    name: string | null
    previewUrl: string | null
    albumId: string | null
  }

  export type SongMaxAggregateOutputType = {
    id: string | null
    name: string | null
    previewUrl: string | null
    albumId: string | null
  }

  export type SongCountAggregateOutputType = {
    id: number
    name: number
    previewUrl: number
    albumId: number
    _all: number
  }


  export type SongMinAggregateInputType = {
    id?: true
    name?: true
    previewUrl?: true
    albumId?: true
  }

  export type SongMaxAggregateInputType = {
    id?: true
    name?: true
    previewUrl?: true
    albumId?: true
  }

  export type SongCountAggregateInputType = {
    id?: true
    name?: true
    previewUrl?: true
    albumId?: true
    _all?: true
  }

  export type SongAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Song to aggregate.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Songs
    **/
    _count?: true | SongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SongMaxAggregateInputType
  }

  export type GetSongAggregateType<T extends SongAggregateArgs> = {
        [P in keyof T & keyof AggregateSong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSong[P]>
      : GetScalarType<T[P], AggregateSong[P]>
  }




  export type SongGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongWhereInput
    orderBy?: SongOrderByWithAggregationInput | SongOrderByWithAggregationInput[]
    by: SongScalarFieldEnum[] | SongScalarFieldEnum
    having?: SongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SongCountAggregateInputType | true
    _min?: SongMinAggregateInputType
    _max?: SongMaxAggregateInputType
  }

  export type SongGroupByOutputType = {
    id: string
    name: string
    previewUrl: string | null
    albumId: string
    _count: SongCountAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  type GetSongGroupByPayload<T extends SongGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SongGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SongGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SongGroupByOutputType[P]>
            : GetScalarType<T[P], SongGroupByOutputType[P]>
        }
      >
    >


  export type SongSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    previewUrl?: boolean
    albumId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    songArtists?: boolean | Song$songArtistsArgs<ExtArgs>
    listenLogs?: boolean | Song$listenLogsArgs<ExtArgs>
    _count?: boolean | SongCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["song"]>



  export type SongSelectScalar = {
    id?: boolean
    name?: boolean
    previewUrl?: boolean
    albumId?: boolean
  }

  export type SongOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "previewUrl" | "albumId", ExtArgs["result"]["song"]>
  export type SongInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    songArtists?: boolean | Song$songArtistsArgs<ExtArgs>
    listenLogs?: boolean | Song$listenLogsArgs<ExtArgs>
    _count?: boolean | SongCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SongPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Song"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      songArtists: Prisma.$SongArtistPayload<ExtArgs>[]
      listenLogs: Prisma.$ListenLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      previewUrl: string | null
      albumId: string
    }, ExtArgs["result"]["song"]>
    composites: {}
  }

  type SongGetPayload<S extends boolean | null | undefined | SongDefaultArgs> = $Result.GetResult<Prisma.$SongPayload, S>

  type SongCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SongFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SongCountAggregateInputType | true
    }

  export interface SongDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Song'], meta: { name: 'Song' } }
    /**
     * Find zero or one Song that matches the filter.
     * @param {SongFindUniqueArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SongFindUniqueArgs>(args: SelectSubset<T, SongFindUniqueArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Song that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SongFindUniqueOrThrowArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SongFindUniqueOrThrowArgs>(args: SelectSubset<T, SongFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Song that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SongFindFirstArgs>(args?: SelectSubset<T, SongFindFirstArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Song that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstOrThrowArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SongFindFirstOrThrowArgs>(args?: SelectSubset<T, SongFindFirstOrThrowArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Songs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Songs
     * const songs = await prisma.song.findMany()
     * 
     * // Get first 10 Songs
     * const songs = await prisma.song.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const songWithIdOnly = await prisma.song.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SongFindManyArgs>(args?: SelectSubset<T, SongFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Song.
     * @param {SongCreateArgs} args - Arguments to create a Song.
     * @example
     * // Create one Song
     * const Song = await prisma.song.create({
     *   data: {
     *     // ... data to create a Song
     *   }
     * })
     * 
     */
    create<T extends SongCreateArgs>(args: SelectSubset<T, SongCreateArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Songs.
     * @param {SongCreateManyArgs} args - Arguments to create many Songs.
     * @example
     * // Create many Songs
     * const song = await prisma.song.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SongCreateManyArgs>(args?: SelectSubset<T, SongCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Song.
     * @param {SongDeleteArgs} args - Arguments to delete one Song.
     * @example
     * // Delete one Song
     * const Song = await prisma.song.delete({
     *   where: {
     *     // ... filter to delete one Song
     *   }
     * })
     * 
     */
    delete<T extends SongDeleteArgs>(args: SelectSubset<T, SongDeleteArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Song.
     * @param {SongUpdateArgs} args - Arguments to update one Song.
     * @example
     * // Update one Song
     * const song = await prisma.song.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SongUpdateArgs>(args: SelectSubset<T, SongUpdateArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Songs.
     * @param {SongDeleteManyArgs} args - Arguments to filter Songs to delete.
     * @example
     * // Delete a few Songs
     * const { count } = await prisma.song.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SongDeleteManyArgs>(args?: SelectSubset<T, SongDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Songs
     * const song = await prisma.song.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SongUpdateManyArgs>(args: SelectSubset<T, SongUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Song.
     * @param {SongUpsertArgs} args - Arguments to update or create a Song.
     * @example
     * // Update or create a Song
     * const song = await prisma.song.upsert({
     *   create: {
     *     // ... data to create a Song
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Song we want to update
     *   }
     * })
     */
    upsert<T extends SongUpsertArgs>(args: SelectSubset<T, SongUpsertArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Songs that matches the filter.
     * @param {SongFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const song = await prisma.song.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SongFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Song.
     * @param {SongAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const song = await prisma.song.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SongAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongCountArgs} args - Arguments to filter Songs to count.
     * @example
     * // Count the number of Songs
     * const count = await prisma.song.count({
     *   where: {
     *     // ... the filter for the Songs we want to count
     *   }
     * })
    **/
    count<T extends SongCountArgs>(
      args?: Subset<T, SongCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SongAggregateArgs>(args: Subset<T, SongAggregateArgs>): Prisma.PrismaPromise<GetSongAggregateType<T>>

    /**
     * Group by Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SongGroupByArgs['orderBy'] }
        : { orderBy?: SongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSongGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Song model
   */
  readonly fields: SongFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Song.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SongClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    songArtists<T extends Song$songArtistsArgs<ExtArgs> = {}>(args?: Subset<T, Song$songArtistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    listenLogs<T extends Song$listenLogsArgs<ExtArgs> = {}>(args?: Subset<T, Song$listenLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Song model
   */
  interface SongFieldRefs {
    readonly id: FieldRef<"Song", 'String'>
    readonly name: FieldRef<"Song", 'String'>
    readonly previewUrl: FieldRef<"Song", 'String'>
    readonly albumId: FieldRef<"Song", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Song findUnique
   */
  export type SongFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song findUniqueOrThrow
   */
  export type SongFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song findFirst
   */
  export type SongFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     */
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Song findFirstOrThrow
   */
  export type SongFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     */
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Song findMany
   */
  export type SongFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Songs to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Song create
   */
  export type SongCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The data needed to create a Song.
     */
    data: XOR<SongCreateInput, SongUncheckedCreateInput>
  }

  /**
   * Song createMany
   */
  export type SongCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Songs.
     */
    data: SongCreateManyInput | SongCreateManyInput[]
  }

  /**
   * Song update
   */
  export type SongUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The data needed to update a Song.
     */
    data: XOR<SongUpdateInput, SongUncheckedUpdateInput>
    /**
     * Choose, which Song to update.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song updateMany
   */
  export type SongUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Songs.
     */
    data: XOR<SongUpdateManyMutationInput, SongUncheckedUpdateManyInput>
    /**
     * Filter which Songs to update
     */
    where?: SongWhereInput
    /**
     * Limit how many Songs to update.
     */
    limit?: number
  }

  /**
   * Song upsert
   */
  export type SongUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The filter to search for the Song to update in case it exists.
     */
    where: SongWhereUniqueInput
    /**
     * In case the Song found by the `where` argument doesn't exist, create a new Song with this data.
     */
    create: XOR<SongCreateInput, SongUncheckedCreateInput>
    /**
     * In case the Song was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SongUpdateInput, SongUncheckedUpdateInput>
  }

  /**
   * Song delete
   */
  export type SongDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter which Song to delete.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song deleteMany
   */
  export type SongDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Songs to delete
     */
    where?: SongWhereInput
    /**
     * Limit how many Songs to delete.
     */
    limit?: number
  }

  /**
   * Song findRaw
   */
  export type SongFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Song aggregateRaw
   */
  export type SongAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Song.songArtists
   */
  export type Song$songArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    where?: SongArtistWhereInput
    orderBy?: SongArtistOrderByWithRelationInput | SongArtistOrderByWithRelationInput[]
    cursor?: SongArtistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SongArtistScalarFieldEnum | SongArtistScalarFieldEnum[]
  }

  /**
   * Song.listenLogs
   */
  export type Song$listenLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    where?: ListenLogWhereInput
    orderBy?: ListenLogOrderByWithRelationInput | ListenLogOrderByWithRelationInput[]
    cursor?: ListenLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListenLogScalarFieldEnum | ListenLogScalarFieldEnum[]
  }

  /**
   * Song without action
   */
  export type SongDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
  }


  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumMinAggregateOutputType = {
    id: string | null
    name: string | null
    coverUrl: string | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: string | null
    name: string | null
    coverUrl: string | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    name: number
    coverUrl: number
    _all: number
  }


  export type AlbumMinAggregateInputType = {
    id?: true
    name?: true
    coverUrl?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    name?: true
    coverUrl?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    name?: true
    coverUrl?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: string
    name: string
    coverUrl: string | null
    _count: AlbumCountAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    coverUrl?: boolean
    tracks?: boolean | Album$tracksArgs<ExtArgs>
    albumArtists?: boolean | Album$albumArtistsArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>



  export type AlbumSelectScalar = {
    id?: boolean
    name?: boolean
    coverUrl?: boolean
  }

  export type AlbumOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "coverUrl", ExtArgs["result"]["album"]>
  export type AlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracks?: boolean | Album$tracksArgs<ExtArgs>
    albumArtists?: boolean | Album$albumArtistsArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      tracks: Prisma.$SongPayload<ExtArgs>[]
      albumArtists: Prisma.$AlbumArtistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      coverUrl: string | null
    }, ExtArgs["result"]["album"]>
    composites: {}
  }

  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlbumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumFindUniqueArgs>(args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Album that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumFindFirstArgs>(args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumFindManyArgs>(args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
     */
    create<T extends AlbumCreateArgs>(args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Albums.
     * @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumCreateManyArgs>(args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
     */
    delete<T extends AlbumDeleteArgs>(args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumUpdateArgs>(args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumDeleteManyArgs>(args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumUpdateManyArgs>(args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
     */
    upsert<T extends AlbumUpsertArgs>(args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Albums that matches the filter.
     * @param {AlbumFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const album = await prisma.album.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AlbumFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Album.
     * @param {AlbumAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const album = await prisma.album.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AlbumAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tracks<T extends Album$tracksArgs<ExtArgs> = {}>(args?: Subset<T, Album$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    albumArtists<T extends Album$albumArtistsArgs<ExtArgs> = {}>(args?: Subset<T, Album$albumArtistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Album model
   */
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'String'>
    readonly name: FieldRef<"Album", 'String'>
    readonly coverUrl: FieldRef<"Album", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }

  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
  }

  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
  }

  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }

  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to delete.
     */
    limit?: number
  }

  /**
   * Album findRaw
   */
  export type AlbumFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Album aggregateRaw
   */
  export type AlbumAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Album.tracks
   */
  export type Album$tracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Song
     */
    omit?: SongOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    where?: SongWhereInput
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    cursor?: SongWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Album.albumArtists
   */
  export type Album$albumArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    where?: AlbumArtistWhereInput
    orderBy?: AlbumArtistOrderByWithRelationInput | AlbumArtistOrderByWithRelationInput[]
    cursor?: AlbumArtistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumArtistScalarFieldEnum | AlbumArtistScalarFieldEnum[]
  }

  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
  }


  /**
   * Model Artist
   */

  export type AggregateArtist = {
    _count: ArtistCountAggregateOutputType | null
    _min: ArtistMinAggregateOutputType | null
    _max: ArtistMaxAggregateOutputType | null
  }

  export type ArtistMinAggregateOutputType = {
    id: string | null
    name: string | null
    coverUrl: string | null
  }

  export type ArtistMaxAggregateOutputType = {
    id: string | null
    name: string | null
    coverUrl: string | null
  }

  export type ArtistCountAggregateOutputType = {
    id: number
    name: number
    coverUrl: number
    topSongIds: number
    _all: number
  }


  export type ArtistMinAggregateInputType = {
    id?: true
    name?: true
    coverUrl?: true
  }

  export type ArtistMaxAggregateInputType = {
    id?: true
    name?: true
    coverUrl?: true
  }

  export type ArtistCountAggregateInputType = {
    id?: true
    name?: true
    coverUrl?: true
    topSongIds?: true
    _all?: true
  }

  export type ArtistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artist to aggregate.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artists
    **/
    _count?: true | ArtistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtistMaxAggregateInputType
  }

  export type GetArtistAggregateType<T extends ArtistAggregateArgs> = {
        [P in keyof T & keyof AggregateArtist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtist[P]>
      : GetScalarType<T[P], AggregateArtist[P]>
  }




  export type ArtistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtistWhereInput
    orderBy?: ArtistOrderByWithAggregationInput | ArtistOrderByWithAggregationInput[]
    by: ArtistScalarFieldEnum[] | ArtistScalarFieldEnum
    having?: ArtistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtistCountAggregateInputType | true
    _min?: ArtistMinAggregateInputType
    _max?: ArtistMaxAggregateInputType
  }

  export type ArtistGroupByOutputType = {
    id: string
    name: string
    coverUrl: string | null
    topSongIds: string[]
    _count: ArtistCountAggregateOutputType | null
    _min: ArtistMinAggregateOutputType | null
    _max: ArtistMaxAggregateOutputType | null
  }

  type GetArtistGroupByPayload<T extends ArtistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtistGroupByOutputType[P]>
            : GetScalarType<T[P], ArtistGroupByOutputType[P]>
        }
      >
    >


  export type ArtistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    coverUrl?: boolean
    topSongIds?: boolean
    songArtists?: boolean | Artist$songArtistsArgs<ExtArgs>
    albumArtists?: boolean | Artist$albumArtistsArgs<ExtArgs>
    followedBy?: boolean | Artist$followedByArgs<ExtArgs>
    _count?: boolean | ArtistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artist"]>



  export type ArtistSelectScalar = {
    id?: boolean
    name?: boolean
    coverUrl?: boolean
    topSongIds?: boolean
  }

  export type ArtistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "coverUrl" | "topSongIds", ExtArgs["result"]["artist"]>
  export type ArtistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songArtists?: boolean | Artist$songArtistsArgs<ExtArgs>
    albumArtists?: boolean | Artist$albumArtistsArgs<ExtArgs>
    followedBy?: boolean | Artist$followedByArgs<ExtArgs>
    _count?: boolean | ArtistCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArtistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Artist"
    objects: {
      songArtists: Prisma.$SongArtistPayload<ExtArgs>[]
      albumArtists: Prisma.$AlbumArtistPayload<ExtArgs>[]
      followedBy: Prisma.$FollowPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      coverUrl: string | null
      topSongIds: string[]
    }, ExtArgs["result"]["artist"]>
    composites: {}
  }

  type ArtistGetPayload<S extends boolean | null | undefined | ArtistDefaultArgs> = $Result.GetResult<Prisma.$ArtistPayload, S>

  type ArtistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArtistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtistCountAggregateInputType | true
    }

  export interface ArtistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Artist'], meta: { name: 'Artist' } }
    /**
     * Find zero or one Artist that matches the filter.
     * @param {ArtistFindUniqueArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArtistFindUniqueArgs>(args: SelectSubset<T, ArtistFindUniqueArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Artist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArtistFindUniqueOrThrowArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArtistFindUniqueOrThrowArgs>(args: SelectSubset<T, ArtistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistFindFirstArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArtistFindFirstArgs>(args?: SelectSubset<T, ArtistFindFirstArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistFindFirstOrThrowArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArtistFindFirstOrThrowArgs>(args?: SelectSubset<T, ArtistFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Artists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artists
     * const artists = await prisma.artist.findMany()
     * 
     * // Get first 10 Artists
     * const artists = await prisma.artist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artistWithIdOnly = await prisma.artist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArtistFindManyArgs>(args?: SelectSubset<T, ArtistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Artist.
     * @param {ArtistCreateArgs} args - Arguments to create a Artist.
     * @example
     * // Create one Artist
     * const Artist = await prisma.artist.create({
     *   data: {
     *     // ... data to create a Artist
     *   }
     * })
     * 
     */
    create<T extends ArtistCreateArgs>(args: SelectSubset<T, ArtistCreateArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Artists.
     * @param {ArtistCreateManyArgs} args - Arguments to create many Artists.
     * @example
     * // Create many Artists
     * const artist = await prisma.artist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArtistCreateManyArgs>(args?: SelectSubset<T, ArtistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Artist.
     * @param {ArtistDeleteArgs} args - Arguments to delete one Artist.
     * @example
     * // Delete one Artist
     * const Artist = await prisma.artist.delete({
     *   where: {
     *     // ... filter to delete one Artist
     *   }
     * })
     * 
     */
    delete<T extends ArtistDeleteArgs>(args: SelectSubset<T, ArtistDeleteArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Artist.
     * @param {ArtistUpdateArgs} args - Arguments to update one Artist.
     * @example
     * // Update one Artist
     * const artist = await prisma.artist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArtistUpdateArgs>(args: SelectSubset<T, ArtistUpdateArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Artists.
     * @param {ArtistDeleteManyArgs} args - Arguments to filter Artists to delete.
     * @example
     * // Delete a few Artists
     * const { count } = await prisma.artist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArtistDeleteManyArgs>(args?: SelectSubset<T, ArtistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artists
     * const artist = await prisma.artist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArtistUpdateManyArgs>(args: SelectSubset<T, ArtistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Artist.
     * @param {ArtistUpsertArgs} args - Arguments to update or create a Artist.
     * @example
     * // Update or create a Artist
     * const artist = await prisma.artist.upsert({
     *   create: {
     *     // ... data to create a Artist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artist we want to update
     *   }
     * })
     */
    upsert<T extends ArtistUpsertArgs>(args: SelectSubset<T, ArtistUpsertArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Artists that matches the filter.
     * @param {ArtistFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const artist = await prisma.artist.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ArtistFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Artist.
     * @param {ArtistAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const artist = await prisma.artist.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ArtistAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistCountArgs} args - Arguments to filter Artists to count.
     * @example
     * // Count the number of Artists
     * const count = await prisma.artist.count({
     *   where: {
     *     // ... the filter for the Artists we want to count
     *   }
     * })
    **/
    count<T extends ArtistCountArgs>(
      args?: Subset<T, ArtistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtistAggregateArgs>(args: Subset<T, ArtistAggregateArgs>): Prisma.PrismaPromise<GetArtistAggregateType<T>>

    /**
     * Group by Artist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtistGroupByArgs['orderBy'] }
        : { orderBy?: ArtistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Artist model
   */
  readonly fields: ArtistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Artist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    songArtists<T extends Artist$songArtistsArgs<ExtArgs> = {}>(args?: Subset<T, Artist$songArtistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    albumArtists<T extends Artist$albumArtistsArgs<ExtArgs> = {}>(args?: Subset<T, Artist$albumArtistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followedBy<T extends Artist$followedByArgs<ExtArgs> = {}>(args?: Subset<T, Artist$followedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Artist model
   */
  interface ArtistFieldRefs {
    readonly id: FieldRef<"Artist", 'String'>
    readonly name: FieldRef<"Artist", 'String'>
    readonly coverUrl: FieldRef<"Artist", 'String'>
    readonly topSongIds: FieldRef<"Artist", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Artist findUnique
   */
  export type ArtistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where: ArtistWhereUniqueInput
  }

  /**
   * Artist findUniqueOrThrow
   */
  export type ArtistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where: ArtistWhereUniqueInput
  }

  /**
   * Artist findFirst
   */
  export type ArtistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artists.
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artists.
     */
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }

  /**
   * Artist findFirstOrThrow
   */
  export type ArtistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artists.
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artists.
     */
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }

  /**
   * Artist findMany
   */
  export type ArtistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artists to fetch.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artists.
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }

  /**
   * Artist create
   */
  export type ArtistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * The data needed to create a Artist.
     */
    data: XOR<ArtistCreateInput, ArtistUncheckedCreateInput>
  }

  /**
   * Artist createMany
   */
  export type ArtistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Artists.
     */
    data: ArtistCreateManyInput | ArtistCreateManyInput[]
  }

  /**
   * Artist update
   */
  export type ArtistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * The data needed to update a Artist.
     */
    data: XOR<ArtistUpdateInput, ArtistUncheckedUpdateInput>
    /**
     * Choose, which Artist to update.
     */
    where: ArtistWhereUniqueInput
  }

  /**
   * Artist updateMany
   */
  export type ArtistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Artists.
     */
    data: XOR<ArtistUpdateManyMutationInput, ArtistUncheckedUpdateManyInput>
    /**
     * Filter which Artists to update
     */
    where?: ArtistWhereInput
    /**
     * Limit how many Artists to update.
     */
    limit?: number
  }

  /**
   * Artist upsert
   */
  export type ArtistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * The filter to search for the Artist to update in case it exists.
     */
    where: ArtistWhereUniqueInput
    /**
     * In case the Artist found by the `where` argument doesn't exist, create a new Artist with this data.
     */
    create: XOR<ArtistCreateInput, ArtistUncheckedCreateInput>
    /**
     * In case the Artist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtistUpdateInput, ArtistUncheckedUpdateInput>
  }

  /**
   * Artist delete
   */
  export type ArtistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter which Artist to delete.
     */
    where: ArtistWhereUniqueInput
  }

  /**
   * Artist deleteMany
   */
  export type ArtistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artists to delete
     */
    where?: ArtistWhereInput
    /**
     * Limit how many Artists to delete.
     */
    limit?: number
  }

  /**
   * Artist findRaw
   */
  export type ArtistFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Artist aggregateRaw
   */
  export type ArtistAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Artist.songArtists
   */
  export type Artist$songArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    where?: SongArtistWhereInput
    orderBy?: SongArtistOrderByWithRelationInput | SongArtistOrderByWithRelationInput[]
    cursor?: SongArtistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SongArtistScalarFieldEnum | SongArtistScalarFieldEnum[]
  }

  /**
   * Artist.albumArtists
   */
  export type Artist$albumArtistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    where?: AlbumArtistWhereInput
    orderBy?: AlbumArtistOrderByWithRelationInput | AlbumArtistOrderByWithRelationInput[]
    cursor?: AlbumArtistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumArtistScalarFieldEnum | AlbumArtistScalarFieldEnum[]
  }

  /**
   * Artist.followedBy
   */
  export type Artist$followedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Artist without action
   */
  export type ArtistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artist
     */
    omit?: ArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistInclude<ExtArgs> | null
  }


  /**
   * Model ListenLog
   */

  export type AggregateListenLog = {
    _count: ListenLogCountAggregateOutputType | null
    _min: ListenLogMinAggregateOutputType | null
    _max: ListenLogMaxAggregateOutputType | null
  }

  export type ListenLogMinAggregateOutputType = {
    id: string | null
    songId: string | null
    userId: string | null
    timestamp: Date | null
  }

  export type ListenLogMaxAggregateOutputType = {
    id: string | null
    songId: string | null
    userId: string | null
    timestamp: Date | null
  }

  export type ListenLogCountAggregateOutputType = {
    id: number
    songId: number
    userId: number
    timestamp: number
    _all: number
  }


  export type ListenLogMinAggregateInputType = {
    id?: true
    songId?: true
    userId?: true
    timestamp?: true
  }

  export type ListenLogMaxAggregateInputType = {
    id?: true
    songId?: true
    userId?: true
    timestamp?: true
  }

  export type ListenLogCountAggregateInputType = {
    id?: true
    songId?: true
    userId?: true
    timestamp?: true
    _all?: true
  }

  export type ListenLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListenLog to aggregate.
     */
    where?: ListenLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListenLogs to fetch.
     */
    orderBy?: ListenLogOrderByWithRelationInput | ListenLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListenLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListenLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListenLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ListenLogs
    **/
    _count?: true | ListenLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListenLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListenLogMaxAggregateInputType
  }

  export type GetListenLogAggregateType<T extends ListenLogAggregateArgs> = {
        [P in keyof T & keyof AggregateListenLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListenLog[P]>
      : GetScalarType<T[P], AggregateListenLog[P]>
  }




  export type ListenLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListenLogWhereInput
    orderBy?: ListenLogOrderByWithAggregationInput | ListenLogOrderByWithAggregationInput[]
    by: ListenLogScalarFieldEnum[] | ListenLogScalarFieldEnum
    having?: ListenLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListenLogCountAggregateInputType | true
    _min?: ListenLogMinAggregateInputType
    _max?: ListenLogMaxAggregateInputType
  }

  export type ListenLogGroupByOutputType = {
    id: string
    songId: string
    userId: string
    timestamp: Date
    _count: ListenLogCountAggregateOutputType | null
    _min: ListenLogMinAggregateOutputType | null
    _max: ListenLogMaxAggregateOutputType | null
  }

  type GetListenLogGroupByPayload<T extends ListenLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListenLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListenLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListenLogGroupByOutputType[P]>
            : GetScalarType<T[P], ListenLogGroupByOutputType[P]>
        }
      >
    >


  export type ListenLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    songId?: boolean
    userId?: boolean
    timestamp?: boolean
    song?: boolean | SongDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listenLog"]>



  export type ListenLogSelectScalar = {
    id?: boolean
    songId?: boolean
    userId?: boolean
    timestamp?: boolean
  }

  export type ListenLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "songId" | "userId" | "timestamp", ExtArgs["result"]["listenLog"]>
  export type ListenLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    song?: boolean | SongDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ListenLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ListenLog"
    objects: {
      song: Prisma.$SongPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      songId: string
      userId: string
      timestamp: Date
    }, ExtArgs["result"]["listenLog"]>
    composites: {}
  }

  type ListenLogGetPayload<S extends boolean | null | undefined | ListenLogDefaultArgs> = $Result.GetResult<Prisma.$ListenLogPayload, S>

  type ListenLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ListenLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListenLogCountAggregateInputType | true
    }

  export interface ListenLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListenLog'], meta: { name: 'ListenLog' } }
    /**
     * Find zero or one ListenLog that matches the filter.
     * @param {ListenLogFindUniqueArgs} args - Arguments to find a ListenLog
     * @example
     * // Get one ListenLog
     * const listenLog = await prisma.listenLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListenLogFindUniqueArgs>(args: SelectSubset<T, ListenLogFindUniqueArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ListenLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ListenLogFindUniqueOrThrowArgs} args - Arguments to find a ListenLog
     * @example
     * // Get one ListenLog
     * const listenLog = await prisma.listenLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListenLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ListenLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListenLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogFindFirstArgs} args - Arguments to find a ListenLog
     * @example
     * // Get one ListenLog
     * const listenLog = await prisma.listenLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListenLogFindFirstArgs>(args?: SelectSubset<T, ListenLogFindFirstArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListenLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogFindFirstOrThrowArgs} args - Arguments to find a ListenLog
     * @example
     * // Get one ListenLog
     * const listenLog = await prisma.listenLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListenLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ListenLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListenLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ListenLogs
     * const listenLogs = await prisma.listenLog.findMany()
     * 
     * // Get first 10 ListenLogs
     * const listenLogs = await prisma.listenLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listenLogWithIdOnly = await prisma.listenLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ListenLogFindManyArgs>(args?: SelectSubset<T, ListenLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ListenLog.
     * @param {ListenLogCreateArgs} args - Arguments to create a ListenLog.
     * @example
     * // Create one ListenLog
     * const ListenLog = await prisma.listenLog.create({
     *   data: {
     *     // ... data to create a ListenLog
     *   }
     * })
     * 
     */
    create<T extends ListenLogCreateArgs>(args: SelectSubset<T, ListenLogCreateArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ListenLogs.
     * @param {ListenLogCreateManyArgs} args - Arguments to create many ListenLogs.
     * @example
     * // Create many ListenLogs
     * const listenLog = await prisma.listenLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListenLogCreateManyArgs>(args?: SelectSubset<T, ListenLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ListenLog.
     * @param {ListenLogDeleteArgs} args - Arguments to delete one ListenLog.
     * @example
     * // Delete one ListenLog
     * const ListenLog = await prisma.listenLog.delete({
     *   where: {
     *     // ... filter to delete one ListenLog
     *   }
     * })
     * 
     */
    delete<T extends ListenLogDeleteArgs>(args: SelectSubset<T, ListenLogDeleteArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ListenLog.
     * @param {ListenLogUpdateArgs} args - Arguments to update one ListenLog.
     * @example
     * // Update one ListenLog
     * const listenLog = await prisma.listenLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListenLogUpdateArgs>(args: SelectSubset<T, ListenLogUpdateArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ListenLogs.
     * @param {ListenLogDeleteManyArgs} args - Arguments to filter ListenLogs to delete.
     * @example
     * // Delete a few ListenLogs
     * const { count } = await prisma.listenLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListenLogDeleteManyArgs>(args?: SelectSubset<T, ListenLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ListenLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ListenLogs
     * const listenLog = await prisma.listenLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListenLogUpdateManyArgs>(args: SelectSubset<T, ListenLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ListenLog.
     * @param {ListenLogUpsertArgs} args - Arguments to update or create a ListenLog.
     * @example
     * // Update or create a ListenLog
     * const listenLog = await prisma.listenLog.upsert({
     *   create: {
     *     // ... data to create a ListenLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ListenLog we want to update
     *   }
     * })
     */
    upsert<T extends ListenLogUpsertArgs>(args: SelectSubset<T, ListenLogUpsertArgs<ExtArgs>>): Prisma__ListenLogClient<$Result.GetResult<Prisma.$ListenLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListenLogs that matches the filter.
     * @param {ListenLogFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const listenLog = await prisma.listenLog.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ListenLogFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ListenLog.
     * @param {ListenLogAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const listenLog = await prisma.listenLog.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ListenLogAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ListenLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogCountArgs} args - Arguments to filter ListenLogs to count.
     * @example
     * // Count the number of ListenLogs
     * const count = await prisma.listenLog.count({
     *   where: {
     *     // ... the filter for the ListenLogs we want to count
     *   }
     * })
    **/
    count<T extends ListenLogCountArgs>(
      args?: Subset<T, ListenLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListenLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ListenLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListenLogAggregateArgs>(args: Subset<T, ListenLogAggregateArgs>): Prisma.PrismaPromise<GetListenLogAggregateType<T>>

    /**
     * Group by ListenLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListenLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListenLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListenLogGroupByArgs['orderBy'] }
        : { orderBy?: ListenLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListenLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListenLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ListenLog model
   */
  readonly fields: ListenLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ListenLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListenLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    song<T extends SongDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SongDefaultArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ListenLog model
   */
  interface ListenLogFieldRefs {
    readonly id: FieldRef<"ListenLog", 'String'>
    readonly songId: FieldRef<"ListenLog", 'String'>
    readonly userId: FieldRef<"ListenLog", 'String'>
    readonly timestamp: FieldRef<"ListenLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ListenLog findUnique
   */
  export type ListenLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * Filter, which ListenLog to fetch.
     */
    where: ListenLogWhereUniqueInput
  }

  /**
   * ListenLog findUniqueOrThrow
   */
  export type ListenLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * Filter, which ListenLog to fetch.
     */
    where: ListenLogWhereUniqueInput
  }

  /**
   * ListenLog findFirst
   */
  export type ListenLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * Filter, which ListenLog to fetch.
     */
    where?: ListenLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListenLogs to fetch.
     */
    orderBy?: ListenLogOrderByWithRelationInput | ListenLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListenLogs.
     */
    cursor?: ListenLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListenLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListenLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListenLogs.
     */
    distinct?: ListenLogScalarFieldEnum | ListenLogScalarFieldEnum[]
  }

  /**
   * ListenLog findFirstOrThrow
   */
  export type ListenLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * Filter, which ListenLog to fetch.
     */
    where?: ListenLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListenLogs to fetch.
     */
    orderBy?: ListenLogOrderByWithRelationInput | ListenLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListenLogs.
     */
    cursor?: ListenLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListenLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListenLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListenLogs.
     */
    distinct?: ListenLogScalarFieldEnum | ListenLogScalarFieldEnum[]
  }

  /**
   * ListenLog findMany
   */
  export type ListenLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * Filter, which ListenLogs to fetch.
     */
    where?: ListenLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListenLogs to fetch.
     */
    orderBy?: ListenLogOrderByWithRelationInput | ListenLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ListenLogs.
     */
    cursor?: ListenLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListenLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListenLogs.
     */
    skip?: number
    distinct?: ListenLogScalarFieldEnum | ListenLogScalarFieldEnum[]
  }

  /**
   * ListenLog create
   */
  export type ListenLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ListenLog.
     */
    data: XOR<ListenLogCreateInput, ListenLogUncheckedCreateInput>
  }

  /**
   * ListenLog createMany
   */
  export type ListenLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ListenLogs.
     */
    data: ListenLogCreateManyInput | ListenLogCreateManyInput[]
  }

  /**
   * ListenLog update
   */
  export type ListenLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ListenLog.
     */
    data: XOR<ListenLogUpdateInput, ListenLogUncheckedUpdateInput>
    /**
     * Choose, which ListenLog to update.
     */
    where: ListenLogWhereUniqueInput
  }

  /**
   * ListenLog updateMany
   */
  export type ListenLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ListenLogs.
     */
    data: XOR<ListenLogUpdateManyMutationInput, ListenLogUncheckedUpdateManyInput>
    /**
     * Filter which ListenLogs to update
     */
    where?: ListenLogWhereInput
    /**
     * Limit how many ListenLogs to update.
     */
    limit?: number
  }

  /**
   * ListenLog upsert
   */
  export type ListenLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ListenLog to update in case it exists.
     */
    where: ListenLogWhereUniqueInput
    /**
     * In case the ListenLog found by the `where` argument doesn't exist, create a new ListenLog with this data.
     */
    create: XOR<ListenLogCreateInput, ListenLogUncheckedCreateInput>
    /**
     * In case the ListenLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListenLogUpdateInput, ListenLogUncheckedUpdateInput>
  }

  /**
   * ListenLog delete
   */
  export type ListenLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
    /**
     * Filter which ListenLog to delete.
     */
    where: ListenLogWhereUniqueInput
  }

  /**
   * ListenLog deleteMany
   */
  export type ListenLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListenLogs to delete
     */
    where?: ListenLogWhereInput
    /**
     * Limit how many ListenLogs to delete.
     */
    limit?: number
  }

  /**
   * ListenLog findRaw
   */
  export type ListenLogFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ListenLog aggregateRaw
   */
  export type ListenLogAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ListenLog without action
   */
  export type ListenLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListenLog
     */
    select?: ListenLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListenLog
     */
    omit?: ListenLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListenLogInclude<ExtArgs> | null
  }


  /**
   * Model AlbumArtist
   */

  export type AggregateAlbumArtist = {
    _count: AlbumArtistCountAggregateOutputType | null
    _min: AlbumArtistMinAggregateOutputType | null
    _max: AlbumArtistMaxAggregateOutputType | null
  }

  export type AlbumArtistMinAggregateOutputType = {
    id: string | null
    albumId: string | null
    artistId: string | null
  }

  export type AlbumArtistMaxAggregateOutputType = {
    id: string | null
    albumId: string | null
    artistId: string | null
  }

  export type AlbumArtistCountAggregateOutputType = {
    id: number
    albumId: number
    artistId: number
    _all: number
  }


  export type AlbumArtistMinAggregateInputType = {
    id?: true
    albumId?: true
    artistId?: true
  }

  export type AlbumArtistMaxAggregateInputType = {
    id?: true
    albumId?: true
    artistId?: true
  }

  export type AlbumArtistCountAggregateInputType = {
    id?: true
    albumId?: true
    artistId?: true
    _all?: true
  }

  export type AlbumArtistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumArtist to aggregate.
     */
    where?: AlbumArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumArtists to fetch.
     */
    orderBy?: AlbumArtistOrderByWithRelationInput | AlbumArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlbumArtists
    **/
    _count?: true | AlbumArtistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumArtistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumArtistMaxAggregateInputType
  }

  export type GetAlbumArtistAggregateType<T extends AlbumArtistAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbumArtist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbumArtist[P]>
      : GetScalarType<T[P], AggregateAlbumArtist[P]>
  }




  export type AlbumArtistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumArtistWhereInput
    orderBy?: AlbumArtistOrderByWithAggregationInput | AlbumArtistOrderByWithAggregationInput[]
    by: AlbumArtistScalarFieldEnum[] | AlbumArtistScalarFieldEnum
    having?: AlbumArtistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumArtistCountAggregateInputType | true
    _min?: AlbumArtistMinAggregateInputType
    _max?: AlbumArtistMaxAggregateInputType
  }

  export type AlbumArtistGroupByOutputType = {
    id: string
    albumId: string
    artistId: string
    _count: AlbumArtistCountAggregateOutputType | null
    _min: AlbumArtistMinAggregateOutputType | null
    _max: AlbumArtistMaxAggregateOutputType | null
  }

  type GetAlbumArtistGroupByPayload<T extends AlbumArtistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumArtistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumArtistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumArtistGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumArtistGroupByOutputType[P]>
        }
      >
    >


  export type AlbumArtistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    artistId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumArtist"]>



  export type AlbumArtistSelectScalar = {
    id?: boolean
    albumId?: boolean
    artistId?: boolean
  }

  export type AlbumArtistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "albumId" | "artistId", ExtArgs["result"]["albumArtist"]>
  export type AlbumArtistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
  }

  export type $AlbumArtistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlbumArtist"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      artist: Prisma.$ArtistPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      albumId: string
      artistId: string
    }, ExtArgs["result"]["albumArtist"]>
    composites: {}
  }

  type AlbumArtistGetPayload<S extends boolean | null | undefined | AlbumArtistDefaultArgs> = $Result.GetResult<Prisma.$AlbumArtistPayload, S>

  type AlbumArtistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlbumArtistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlbumArtistCountAggregateInputType | true
    }

  export interface AlbumArtistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlbumArtist'], meta: { name: 'AlbumArtist' } }
    /**
     * Find zero or one AlbumArtist that matches the filter.
     * @param {AlbumArtistFindUniqueArgs} args - Arguments to find a AlbumArtist
     * @example
     * // Get one AlbumArtist
     * const albumArtist = await prisma.albumArtist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumArtistFindUniqueArgs>(args: SelectSubset<T, AlbumArtistFindUniqueArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlbumArtist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlbumArtistFindUniqueOrThrowArgs} args - Arguments to find a AlbumArtist
     * @example
     * // Get one AlbumArtist
     * const albumArtist = await prisma.albumArtist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumArtistFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumArtistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlbumArtist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistFindFirstArgs} args - Arguments to find a AlbumArtist
     * @example
     * // Get one AlbumArtist
     * const albumArtist = await prisma.albumArtist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumArtistFindFirstArgs>(args?: SelectSubset<T, AlbumArtistFindFirstArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlbumArtist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistFindFirstOrThrowArgs} args - Arguments to find a AlbumArtist
     * @example
     * // Get one AlbumArtist
     * const albumArtist = await prisma.albumArtist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumArtistFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumArtistFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlbumArtists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlbumArtists
     * const albumArtists = await prisma.albumArtist.findMany()
     * 
     * // Get first 10 AlbumArtists
     * const albumArtists = await prisma.albumArtist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumArtistWithIdOnly = await prisma.albumArtist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumArtistFindManyArgs>(args?: SelectSubset<T, AlbumArtistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlbumArtist.
     * @param {AlbumArtistCreateArgs} args - Arguments to create a AlbumArtist.
     * @example
     * // Create one AlbumArtist
     * const AlbumArtist = await prisma.albumArtist.create({
     *   data: {
     *     // ... data to create a AlbumArtist
     *   }
     * })
     * 
     */
    create<T extends AlbumArtistCreateArgs>(args: SelectSubset<T, AlbumArtistCreateArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlbumArtists.
     * @param {AlbumArtistCreateManyArgs} args - Arguments to create many AlbumArtists.
     * @example
     * // Create many AlbumArtists
     * const albumArtist = await prisma.albumArtist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumArtistCreateManyArgs>(args?: SelectSubset<T, AlbumArtistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AlbumArtist.
     * @param {AlbumArtistDeleteArgs} args - Arguments to delete one AlbumArtist.
     * @example
     * // Delete one AlbumArtist
     * const AlbumArtist = await prisma.albumArtist.delete({
     *   where: {
     *     // ... filter to delete one AlbumArtist
     *   }
     * })
     * 
     */
    delete<T extends AlbumArtistDeleteArgs>(args: SelectSubset<T, AlbumArtistDeleteArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlbumArtist.
     * @param {AlbumArtistUpdateArgs} args - Arguments to update one AlbumArtist.
     * @example
     * // Update one AlbumArtist
     * const albumArtist = await prisma.albumArtist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumArtistUpdateArgs>(args: SelectSubset<T, AlbumArtistUpdateArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlbumArtists.
     * @param {AlbumArtistDeleteManyArgs} args - Arguments to filter AlbumArtists to delete.
     * @example
     * // Delete a few AlbumArtists
     * const { count } = await prisma.albumArtist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumArtistDeleteManyArgs>(args?: SelectSubset<T, AlbumArtistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlbumArtists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlbumArtists
     * const albumArtist = await prisma.albumArtist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumArtistUpdateManyArgs>(args: SelectSubset<T, AlbumArtistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AlbumArtist.
     * @param {AlbumArtistUpsertArgs} args - Arguments to update or create a AlbumArtist.
     * @example
     * // Update or create a AlbumArtist
     * const albumArtist = await prisma.albumArtist.upsert({
     *   create: {
     *     // ... data to create a AlbumArtist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlbumArtist we want to update
     *   }
     * })
     */
    upsert<T extends AlbumArtistUpsertArgs>(args: SelectSubset<T, AlbumArtistUpsertArgs<ExtArgs>>): Prisma__AlbumArtistClient<$Result.GetResult<Prisma.$AlbumArtistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlbumArtists that matches the filter.
     * @param {AlbumArtistFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const albumArtist = await prisma.albumArtist.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AlbumArtistFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a AlbumArtist.
     * @param {AlbumArtistAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const albumArtist = await prisma.albumArtist.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AlbumArtistAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of AlbumArtists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistCountArgs} args - Arguments to filter AlbumArtists to count.
     * @example
     * // Count the number of AlbumArtists
     * const count = await prisma.albumArtist.count({
     *   where: {
     *     // ... the filter for the AlbumArtists we want to count
     *   }
     * })
    **/
    count<T extends AlbumArtistCountArgs>(
      args?: Subset<T, AlbumArtistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumArtistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlbumArtist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumArtistAggregateArgs>(args: Subset<T, AlbumArtistAggregateArgs>): Prisma.PrismaPromise<GetAlbumArtistAggregateType<T>>

    /**
     * Group by AlbumArtist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumArtistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumArtistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumArtistGroupByArgs['orderBy'] }
        : { orderBy?: AlbumArtistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumArtistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlbumArtist model
   */
  readonly fields: AlbumArtistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlbumArtist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumArtistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    artist<T extends ArtistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtistDefaultArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlbumArtist model
   */
  interface AlbumArtistFieldRefs {
    readonly id: FieldRef<"AlbumArtist", 'String'>
    readonly albumId: FieldRef<"AlbumArtist", 'String'>
    readonly artistId: FieldRef<"AlbumArtist", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AlbumArtist findUnique
   */
  export type AlbumArtistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * Filter, which AlbumArtist to fetch.
     */
    where: AlbumArtistWhereUniqueInput
  }

  /**
   * AlbumArtist findUniqueOrThrow
   */
  export type AlbumArtistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * Filter, which AlbumArtist to fetch.
     */
    where: AlbumArtistWhereUniqueInput
  }

  /**
   * AlbumArtist findFirst
   */
  export type AlbumArtistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * Filter, which AlbumArtist to fetch.
     */
    where?: AlbumArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumArtists to fetch.
     */
    orderBy?: AlbumArtistOrderByWithRelationInput | AlbumArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumArtists.
     */
    cursor?: AlbumArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumArtists.
     */
    distinct?: AlbumArtistScalarFieldEnum | AlbumArtistScalarFieldEnum[]
  }

  /**
   * AlbumArtist findFirstOrThrow
   */
  export type AlbumArtistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * Filter, which AlbumArtist to fetch.
     */
    where?: AlbumArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumArtists to fetch.
     */
    orderBy?: AlbumArtistOrderByWithRelationInput | AlbumArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumArtists.
     */
    cursor?: AlbumArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumArtists.
     */
    distinct?: AlbumArtistScalarFieldEnum | AlbumArtistScalarFieldEnum[]
  }

  /**
   * AlbumArtist findMany
   */
  export type AlbumArtistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * Filter, which AlbumArtists to fetch.
     */
    where?: AlbumArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumArtists to fetch.
     */
    orderBy?: AlbumArtistOrderByWithRelationInput | AlbumArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlbumArtists.
     */
    cursor?: AlbumArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumArtists.
     */
    skip?: number
    distinct?: AlbumArtistScalarFieldEnum | AlbumArtistScalarFieldEnum[]
  }

  /**
   * AlbumArtist create
   */
  export type AlbumArtistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * The data needed to create a AlbumArtist.
     */
    data: XOR<AlbumArtistCreateInput, AlbumArtistUncheckedCreateInput>
  }

  /**
   * AlbumArtist createMany
   */
  export type AlbumArtistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlbumArtists.
     */
    data: AlbumArtistCreateManyInput | AlbumArtistCreateManyInput[]
  }

  /**
   * AlbumArtist update
   */
  export type AlbumArtistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * The data needed to update a AlbumArtist.
     */
    data: XOR<AlbumArtistUpdateInput, AlbumArtistUncheckedUpdateInput>
    /**
     * Choose, which AlbumArtist to update.
     */
    where: AlbumArtistWhereUniqueInput
  }

  /**
   * AlbumArtist updateMany
   */
  export type AlbumArtistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlbumArtists.
     */
    data: XOR<AlbumArtistUpdateManyMutationInput, AlbumArtistUncheckedUpdateManyInput>
    /**
     * Filter which AlbumArtists to update
     */
    where?: AlbumArtistWhereInput
    /**
     * Limit how many AlbumArtists to update.
     */
    limit?: number
  }

  /**
   * AlbumArtist upsert
   */
  export type AlbumArtistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * The filter to search for the AlbumArtist to update in case it exists.
     */
    where: AlbumArtistWhereUniqueInput
    /**
     * In case the AlbumArtist found by the `where` argument doesn't exist, create a new AlbumArtist with this data.
     */
    create: XOR<AlbumArtistCreateInput, AlbumArtistUncheckedCreateInput>
    /**
     * In case the AlbumArtist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumArtistUpdateInput, AlbumArtistUncheckedUpdateInput>
  }

  /**
   * AlbumArtist delete
   */
  export type AlbumArtistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
    /**
     * Filter which AlbumArtist to delete.
     */
    where: AlbumArtistWhereUniqueInput
  }

  /**
   * AlbumArtist deleteMany
   */
  export type AlbumArtistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumArtists to delete
     */
    where?: AlbumArtistWhereInput
    /**
     * Limit how many AlbumArtists to delete.
     */
    limit?: number
  }

  /**
   * AlbumArtist findRaw
   */
  export type AlbumArtistFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * AlbumArtist aggregateRaw
   */
  export type AlbumArtistAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * AlbumArtist without action
   */
  export type AlbumArtistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumArtist
     */
    select?: AlbumArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumArtist
     */
    omit?: AlbumArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumArtistInclude<ExtArgs> | null
  }


  /**
   * Model SongArtist
   */

  export type AggregateSongArtist = {
    _count: SongArtistCountAggregateOutputType | null
    _min: SongArtistMinAggregateOutputType | null
    _max: SongArtistMaxAggregateOutputType | null
  }

  export type SongArtistMinAggregateOutputType = {
    id: string | null
    songId: string | null
    artistId: string | null
  }

  export type SongArtistMaxAggregateOutputType = {
    id: string | null
    songId: string | null
    artistId: string | null
  }

  export type SongArtistCountAggregateOutputType = {
    id: number
    songId: number
    artistId: number
    _all: number
  }


  export type SongArtistMinAggregateInputType = {
    id?: true
    songId?: true
    artistId?: true
  }

  export type SongArtistMaxAggregateInputType = {
    id?: true
    songId?: true
    artistId?: true
  }

  export type SongArtistCountAggregateInputType = {
    id?: true
    songId?: true
    artistId?: true
    _all?: true
  }

  export type SongArtistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SongArtist to aggregate.
     */
    where?: SongArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SongArtists to fetch.
     */
    orderBy?: SongArtistOrderByWithRelationInput | SongArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SongArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SongArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SongArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SongArtists
    **/
    _count?: true | SongArtistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SongArtistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SongArtistMaxAggregateInputType
  }

  export type GetSongArtistAggregateType<T extends SongArtistAggregateArgs> = {
        [P in keyof T & keyof AggregateSongArtist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSongArtist[P]>
      : GetScalarType<T[P], AggregateSongArtist[P]>
  }




  export type SongArtistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongArtistWhereInput
    orderBy?: SongArtistOrderByWithAggregationInput | SongArtistOrderByWithAggregationInput[]
    by: SongArtistScalarFieldEnum[] | SongArtistScalarFieldEnum
    having?: SongArtistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SongArtistCountAggregateInputType | true
    _min?: SongArtistMinAggregateInputType
    _max?: SongArtistMaxAggregateInputType
  }

  export type SongArtistGroupByOutputType = {
    id: string
    songId: string
    artistId: string
    _count: SongArtistCountAggregateOutputType | null
    _min: SongArtistMinAggregateOutputType | null
    _max: SongArtistMaxAggregateOutputType | null
  }

  type GetSongArtistGroupByPayload<T extends SongArtistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SongArtistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SongArtistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SongArtistGroupByOutputType[P]>
            : GetScalarType<T[P], SongArtistGroupByOutputType[P]>
        }
      >
    >


  export type SongArtistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    songId?: boolean
    artistId?: boolean
    song?: boolean | SongDefaultArgs<ExtArgs>
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["songArtist"]>



  export type SongArtistSelectScalar = {
    id?: boolean
    songId?: boolean
    artistId?: boolean
  }

  export type SongArtistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "songId" | "artistId", ExtArgs["result"]["songArtist"]>
  export type SongArtistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    song?: boolean | SongDefaultArgs<ExtArgs>
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
  }

  export type $SongArtistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SongArtist"
    objects: {
      song: Prisma.$SongPayload<ExtArgs>
      artist: Prisma.$ArtistPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      songId: string
      artistId: string
    }, ExtArgs["result"]["songArtist"]>
    composites: {}
  }

  type SongArtistGetPayload<S extends boolean | null | undefined | SongArtistDefaultArgs> = $Result.GetResult<Prisma.$SongArtistPayload, S>

  type SongArtistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SongArtistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SongArtistCountAggregateInputType | true
    }

  export interface SongArtistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SongArtist'], meta: { name: 'SongArtist' } }
    /**
     * Find zero or one SongArtist that matches the filter.
     * @param {SongArtistFindUniqueArgs} args - Arguments to find a SongArtist
     * @example
     * // Get one SongArtist
     * const songArtist = await prisma.songArtist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SongArtistFindUniqueArgs>(args: SelectSubset<T, SongArtistFindUniqueArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SongArtist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SongArtistFindUniqueOrThrowArgs} args - Arguments to find a SongArtist
     * @example
     * // Get one SongArtist
     * const songArtist = await prisma.songArtist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SongArtistFindUniqueOrThrowArgs>(args: SelectSubset<T, SongArtistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SongArtist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistFindFirstArgs} args - Arguments to find a SongArtist
     * @example
     * // Get one SongArtist
     * const songArtist = await prisma.songArtist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SongArtistFindFirstArgs>(args?: SelectSubset<T, SongArtistFindFirstArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SongArtist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistFindFirstOrThrowArgs} args - Arguments to find a SongArtist
     * @example
     * // Get one SongArtist
     * const songArtist = await prisma.songArtist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SongArtistFindFirstOrThrowArgs>(args?: SelectSubset<T, SongArtistFindFirstOrThrowArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SongArtists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SongArtists
     * const songArtists = await prisma.songArtist.findMany()
     * 
     * // Get first 10 SongArtists
     * const songArtists = await prisma.songArtist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const songArtistWithIdOnly = await prisma.songArtist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SongArtistFindManyArgs>(args?: SelectSubset<T, SongArtistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SongArtist.
     * @param {SongArtistCreateArgs} args - Arguments to create a SongArtist.
     * @example
     * // Create one SongArtist
     * const SongArtist = await prisma.songArtist.create({
     *   data: {
     *     // ... data to create a SongArtist
     *   }
     * })
     * 
     */
    create<T extends SongArtistCreateArgs>(args: SelectSubset<T, SongArtistCreateArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SongArtists.
     * @param {SongArtistCreateManyArgs} args - Arguments to create many SongArtists.
     * @example
     * // Create many SongArtists
     * const songArtist = await prisma.songArtist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SongArtistCreateManyArgs>(args?: SelectSubset<T, SongArtistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SongArtist.
     * @param {SongArtistDeleteArgs} args - Arguments to delete one SongArtist.
     * @example
     * // Delete one SongArtist
     * const SongArtist = await prisma.songArtist.delete({
     *   where: {
     *     // ... filter to delete one SongArtist
     *   }
     * })
     * 
     */
    delete<T extends SongArtistDeleteArgs>(args: SelectSubset<T, SongArtistDeleteArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SongArtist.
     * @param {SongArtistUpdateArgs} args - Arguments to update one SongArtist.
     * @example
     * // Update one SongArtist
     * const songArtist = await prisma.songArtist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SongArtistUpdateArgs>(args: SelectSubset<T, SongArtistUpdateArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SongArtists.
     * @param {SongArtistDeleteManyArgs} args - Arguments to filter SongArtists to delete.
     * @example
     * // Delete a few SongArtists
     * const { count } = await prisma.songArtist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SongArtistDeleteManyArgs>(args?: SelectSubset<T, SongArtistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SongArtists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SongArtists
     * const songArtist = await prisma.songArtist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SongArtistUpdateManyArgs>(args: SelectSubset<T, SongArtistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SongArtist.
     * @param {SongArtistUpsertArgs} args - Arguments to update or create a SongArtist.
     * @example
     * // Update or create a SongArtist
     * const songArtist = await prisma.songArtist.upsert({
     *   create: {
     *     // ... data to create a SongArtist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SongArtist we want to update
     *   }
     * })
     */
    upsert<T extends SongArtistUpsertArgs>(args: SelectSubset<T, SongArtistUpsertArgs<ExtArgs>>): Prisma__SongArtistClient<$Result.GetResult<Prisma.$SongArtistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SongArtists that matches the filter.
     * @param {SongArtistFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const songArtist = await prisma.songArtist.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SongArtistFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SongArtist.
     * @param {SongArtistAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const songArtist = await prisma.songArtist.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SongArtistAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SongArtists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistCountArgs} args - Arguments to filter SongArtists to count.
     * @example
     * // Count the number of SongArtists
     * const count = await prisma.songArtist.count({
     *   where: {
     *     // ... the filter for the SongArtists we want to count
     *   }
     * })
    **/
    count<T extends SongArtistCountArgs>(
      args?: Subset<T, SongArtistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SongArtistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SongArtist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SongArtistAggregateArgs>(args: Subset<T, SongArtistAggregateArgs>): Prisma.PrismaPromise<GetSongArtistAggregateType<T>>

    /**
     * Group by SongArtist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongArtistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SongArtistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SongArtistGroupByArgs['orderBy'] }
        : { orderBy?: SongArtistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SongArtistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSongArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SongArtist model
   */
  readonly fields: SongArtistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SongArtist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SongArtistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    song<T extends SongDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SongDefaultArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    artist<T extends ArtistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtistDefaultArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SongArtist model
   */
  interface SongArtistFieldRefs {
    readonly id: FieldRef<"SongArtist", 'String'>
    readonly songId: FieldRef<"SongArtist", 'String'>
    readonly artistId: FieldRef<"SongArtist", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SongArtist findUnique
   */
  export type SongArtistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * Filter, which SongArtist to fetch.
     */
    where: SongArtistWhereUniqueInput
  }

  /**
   * SongArtist findUniqueOrThrow
   */
  export type SongArtistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * Filter, which SongArtist to fetch.
     */
    where: SongArtistWhereUniqueInput
  }

  /**
   * SongArtist findFirst
   */
  export type SongArtistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * Filter, which SongArtist to fetch.
     */
    where?: SongArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SongArtists to fetch.
     */
    orderBy?: SongArtistOrderByWithRelationInput | SongArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SongArtists.
     */
    cursor?: SongArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SongArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SongArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SongArtists.
     */
    distinct?: SongArtistScalarFieldEnum | SongArtistScalarFieldEnum[]
  }

  /**
   * SongArtist findFirstOrThrow
   */
  export type SongArtistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * Filter, which SongArtist to fetch.
     */
    where?: SongArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SongArtists to fetch.
     */
    orderBy?: SongArtistOrderByWithRelationInput | SongArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SongArtists.
     */
    cursor?: SongArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SongArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SongArtists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SongArtists.
     */
    distinct?: SongArtistScalarFieldEnum | SongArtistScalarFieldEnum[]
  }

  /**
   * SongArtist findMany
   */
  export type SongArtistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * Filter, which SongArtists to fetch.
     */
    where?: SongArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SongArtists to fetch.
     */
    orderBy?: SongArtistOrderByWithRelationInput | SongArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SongArtists.
     */
    cursor?: SongArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SongArtists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SongArtists.
     */
    skip?: number
    distinct?: SongArtistScalarFieldEnum | SongArtistScalarFieldEnum[]
  }

  /**
   * SongArtist create
   */
  export type SongArtistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * The data needed to create a SongArtist.
     */
    data: XOR<SongArtistCreateInput, SongArtistUncheckedCreateInput>
  }

  /**
   * SongArtist createMany
   */
  export type SongArtistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SongArtists.
     */
    data: SongArtistCreateManyInput | SongArtistCreateManyInput[]
  }

  /**
   * SongArtist update
   */
  export type SongArtistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * The data needed to update a SongArtist.
     */
    data: XOR<SongArtistUpdateInput, SongArtistUncheckedUpdateInput>
    /**
     * Choose, which SongArtist to update.
     */
    where: SongArtistWhereUniqueInput
  }

  /**
   * SongArtist updateMany
   */
  export type SongArtistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SongArtists.
     */
    data: XOR<SongArtistUpdateManyMutationInput, SongArtistUncheckedUpdateManyInput>
    /**
     * Filter which SongArtists to update
     */
    where?: SongArtistWhereInput
    /**
     * Limit how many SongArtists to update.
     */
    limit?: number
  }

  /**
   * SongArtist upsert
   */
  export type SongArtistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * The filter to search for the SongArtist to update in case it exists.
     */
    where: SongArtistWhereUniqueInput
    /**
     * In case the SongArtist found by the `where` argument doesn't exist, create a new SongArtist with this data.
     */
    create: XOR<SongArtistCreateInput, SongArtistUncheckedCreateInput>
    /**
     * In case the SongArtist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SongArtistUpdateInput, SongArtistUncheckedUpdateInput>
  }

  /**
   * SongArtist delete
   */
  export type SongArtistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
    /**
     * Filter which SongArtist to delete.
     */
    where: SongArtistWhereUniqueInput
  }

  /**
   * SongArtist deleteMany
   */
  export type SongArtistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SongArtists to delete
     */
    where?: SongArtistWhereInput
    /**
     * Limit how many SongArtists to delete.
     */
    limit?: number
  }

  /**
   * SongArtist findRaw
   */
  export type SongArtistFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SongArtist aggregateRaw
   */
  export type SongArtistAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SongArtist without action
   */
  export type SongArtistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongArtist
     */
    select?: SongArtistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SongArtist
     */
    omit?: SongArtistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongArtistInclude<ExtArgs> | null
  }


  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    id: string | null
    userId: string | null
    artistId: string | null
  }

  export type FollowMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    artistId: string | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    userId: number
    artistId: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    userId?: true
    artistId?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }

  export type FollowGroupByOutputType = {
    id: string
    userId: string
    artistId: string
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    artistId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>



  export type FollowSelectScalar = {
    id?: boolean
    userId?: boolean
    artistId?: boolean
  }

  export type FollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "artistId", ExtArgs["result"]["follow"]>
  export type FollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
  }

  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follow"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      artist: Prisma.$ArtistPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      artistId: string
    }, ExtArgs["result"]["follow"]>
    composites: {}
  }

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = $Result.GetResult<Prisma.$FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowFindManyArgs>(args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
     */
    create<T extends FollowCreateArgs>(args: SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowCreateManyArgs>(args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
     */
    delete<T extends FollowDeleteArgs>(args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpdateArgs>(args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowDeleteManyArgs>(args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpdateManyArgs>(args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Follows that matches the filter.
     * @param {FollowFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const follow = await prisma.follow.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: FollowFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Follow.
     * @param {FollowAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const follow = await prisma.follow.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: FollowAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    artist<T extends ArtistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtistDefaultArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follow model
   */
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'String'>
    readonly userId: FieldRef<"Follow", 'String'>
    readonly artistId: FieldRef<"Follow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
  }

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
  }

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to delete.
     */
    limit?: number
  }

  /**
   * Follow findRaw
   */
  export type FollowFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Follow aggregateRaw
   */
  export type FollowAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    followedArtists: 'followedArtists'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SongScalarFieldEnum: {
    id: 'id',
    name: 'name',
    previewUrl: 'previewUrl',
    albumId: 'albumId'
  };

  export type SongScalarFieldEnum = (typeof SongScalarFieldEnum)[keyof typeof SongScalarFieldEnum]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    name: 'name',
    coverUrl: 'coverUrl'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const ArtistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    coverUrl: 'coverUrl',
    topSongIds: 'topSongIds'
  };

  export type ArtistScalarFieldEnum = (typeof ArtistScalarFieldEnum)[keyof typeof ArtistScalarFieldEnum]


  export const ListenLogScalarFieldEnum: {
    id: 'id',
    songId: 'songId',
    userId: 'userId',
    timestamp: 'timestamp'
  };

  export type ListenLogScalarFieldEnum = (typeof ListenLogScalarFieldEnum)[keyof typeof ListenLogScalarFieldEnum]


  export const AlbumArtistScalarFieldEnum: {
    id: 'id',
    albumId: 'albumId',
    artistId: 'artistId'
  };

  export type AlbumArtistScalarFieldEnum = (typeof AlbumArtistScalarFieldEnum)[keyof typeof AlbumArtistScalarFieldEnum]


  export const SongArtistScalarFieldEnum: {
    id: 'id',
    songId: 'songId',
    artistId: 'artistId'
  };

  export type SongArtistScalarFieldEnum = (typeof SongArtistScalarFieldEnum)[keyof typeof SongArtistScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    artistId: 'artistId'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    followedArtists?: StringNullableListFilter<"User">
    listenLogs?: ListenLogListRelationFilter
    follows?: FollowListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    followedArtists?: SortOrder
    listenLogs?: ListenLogOrderByRelationAggregateInput
    follows?: FollowOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    followedArtists?: StringNullableListFilter<"User">
    listenLogs?: ListenLogListRelationFilter
    follows?: FollowListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    followedArtists?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    followedArtists?: StringNullableListFilter<"User">
  }

  export type SongWhereInput = {
    AND?: SongWhereInput | SongWhereInput[]
    OR?: SongWhereInput[]
    NOT?: SongWhereInput | SongWhereInput[]
    id?: StringFilter<"Song"> | string
    name?: StringFilter<"Song"> | string
    previewUrl?: StringNullableFilter<"Song"> | string | null
    albumId?: StringFilter<"Song"> | string
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    songArtists?: SongArtistListRelationFilter
    listenLogs?: ListenLogListRelationFilter
  }

  export type SongOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    previewUrl?: SortOrder
    albumId?: SortOrder
    album?: AlbumOrderByWithRelationInput
    songArtists?: SongArtistOrderByRelationAggregateInput
    listenLogs?: ListenLogOrderByRelationAggregateInput
  }

  export type SongWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SongWhereInput | SongWhereInput[]
    OR?: SongWhereInput[]
    NOT?: SongWhereInput | SongWhereInput[]
    name?: StringFilter<"Song"> | string
    previewUrl?: StringNullableFilter<"Song"> | string | null
    albumId?: StringFilter<"Song"> | string
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    songArtists?: SongArtistListRelationFilter
    listenLogs?: ListenLogListRelationFilter
  }, "id">

  export type SongOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    previewUrl?: SortOrder
    albumId?: SortOrder
    _count?: SongCountOrderByAggregateInput
    _max?: SongMaxOrderByAggregateInput
    _min?: SongMinOrderByAggregateInput
  }

  export type SongScalarWhereWithAggregatesInput = {
    AND?: SongScalarWhereWithAggregatesInput | SongScalarWhereWithAggregatesInput[]
    OR?: SongScalarWhereWithAggregatesInput[]
    NOT?: SongScalarWhereWithAggregatesInput | SongScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Song"> | string
    name?: StringWithAggregatesFilter<"Song"> | string
    previewUrl?: StringNullableWithAggregatesFilter<"Song"> | string | null
    albumId?: StringWithAggregatesFilter<"Song"> | string
  }

  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: StringFilter<"Album"> | string
    name?: StringFilter<"Album"> | string
    coverUrl?: StringNullableFilter<"Album"> | string | null
    tracks?: SongListRelationFilter
    albumArtists?: AlbumArtistListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
    tracks?: SongOrderByRelationAggregateInput
    albumArtists?: AlbumArtistOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    name?: StringFilter<"Album"> | string
    coverUrl?: StringNullableFilter<"Album"> | string | null
    tracks?: SongListRelationFilter
    albumArtists?: AlbumArtistListRelationFilter
  }, "id">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Album"> | string
    name?: StringWithAggregatesFilter<"Album"> | string
    coverUrl?: StringNullableWithAggregatesFilter<"Album"> | string | null
  }

  export type ArtistWhereInput = {
    AND?: ArtistWhereInput | ArtistWhereInput[]
    OR?: ArtistWhereInput[]
    NOT?: ArtistWhereInput | ArtistWhereInput[]
    id?: StringFilter<"Artist"> | string
    name?: StringFilter<"Artist"> | string
    coverUrl?: StringNullableFilter<"Artist"> | string | null
    topSongIds?: StringNullableListFilter<"Artist">
    songArtists?: SongArtistListRelationFilter
    albumArtists?: AlbumArtistListRelationFilter
    followedBy?: FollowListRelationFilter
  }

  export type ArtistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
    topSongIds?: SortOrder
    songArtists?: SongArtistOrderByRelationAggregateInput
    albumArtists?: AlbumArtistOrderByRelationAggregateInput
    followedBy?: FollowOrderByRelationAggregateInput
  }

  export type ArtistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArtistWhereInput | ArtistWhereInput[]
    OR?: ArtistWhereInput[]
    NOT?: ArtistWhereInput | ArtistWhereInput[]
    name?: StringFilter<"Artist"> | string
    coverUrl?: StringNullableFilter<"Artist"> | string | null
    topSongIds?: StringNullableListFilter<"Artist">
    songArtists?: SongArtistListRelationFilter
    albumArtists?: AlbumArtistListRelationFilter
    followedBy?: FollowListRelationFilter
  }, "id">

  export type ArtistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
    topSongIds?: SortOrder
    _count?: ArtistCountOrderByAggregateInput
    _max?: ArtistMaxOrderByAggregateInput
    _min?: ArtistMinOrderByAggregateInput
  }

  export type ArtistScalarWhereWithAggregatesInput = {
    AND?: ArtistScalarWhereWithAggregatesInput | ArtistScalarWhereWithAggregatesInput[]
    OR?: ArtistScalarWhereWithAggregatesInput[]
    NOT?: ArtistScalarWhereWithAggregatesInput | ArtistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Artist"> | string
    name?: StringWithAggregatesFilter<"Artist"> | string
    coverUrl?: StringNullableWithAggregatesFilter<"Artist"> | string | null
    topSongIds?: StringNullableListFilter<"Artist">
  }

  export type ListenLogWhereInput = {
    AND?: ListenLogWhereInput | ListenLogWhereInput[]
    OR?: ListenLogWhereInput[]
    NOT?: ListenLogWhereInput | ListenLogWhereInput[]
    id?: StringFilter<"ListenLog"> | string
    songId?: StringFilter<"ListenLog"> | string
    userId?: StringFilter<"ListenLog"> | string
    timestamp?: DateTimeFilter<"ListenLog"> | Date | string
    song?: XOR<SongScalarRelationFilter, SongWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ListenLogOrderByWithRelationInput = {
    id?: SortOrder
    songId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    song?: SongOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ListenLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ListenLogWhereInput | ListenLogWhereInput[]
    OR?: ListenLogWhereInput[]
    NOT?: ListenLogWhereInput | ListenLogWhereInput[]
    songId?: StringFilter<"ListenLog"> | string
    userId?: StringFilter<"ListenLog"> | string
    timestamp?: DateTimeFilter<"ListenLog"> | Date | string
    song?: XOR<SongScalarRelationFilter, SongWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ListenLogOrderByWithAggregationInput = {
    id?: SortOrder
    songId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    _count?: ListenLogCountOrderByAggregateInput
    _max?: ListenLogMaxOrderByAggregateInput
    _min?: ListenLogMinOrderByAggregateInput
  }

  export type ListenLogScalarWhereWithAggregatesInput = {
    AND?: ListenLogScalarWhereWithAggregatesInput | ListenLogScalarWhereWithAggregatesInput[]
    OR?: ListenLogScalarWhereWithAggregatesInput[]
    NOT?: ListenLogScalarWhereWithAggregatesInput | ListenLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ListenLog"> | string
    songId?: StringWithAggregatesFilter<"ListenLog"> | string
    userId?: StringWithAggregatesFilter<"ListenLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"ListenLog"> | Date | string
  }

  export type AlbumArtistWhereInput = {
    AND?: AlbumArtistWhereInput | AlbumArtistWhereInput[]
    OR?: AlbumArtistWhereInput[]
    NOT?: AlbumArtistWhereInput | AlbumArtistWhereInput[]
    id?: StringFilter<"AlbumArtist"> | string
    albumId?: StringFilter<"AlbumArtist"> | string
    artistId?: StringFilter<"AlbumArtist"> | string
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    artist?: XOR<ArtistScalarRelationFilter, ArtistWhereInput>
  }

  export type AlbumArtistOrderByWithRelationInput = {
    id?: SortOrder
    albumId?: SortOrder
    artistId?: SortOrder
    album?: AlbumOrderByWithRelationInput
    artist?: ArtistOrderByWithRelationInput
  }

  export type AlbumArtistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    albumId_artistId?: AlbumArtistAlbumIdArtistIdCompoundUniqueInput
    AND?: AlbumArtistWhereInput | AlbumArtistWhereInput[]
    OR?: AlbumArtistWhereInput[]
    NOT?: AlbumArtistWhereInput | AlbumArtistWhereInput[]
    albumId?: StringFilter<"AlbumArtist"> | string
    artistId?: StringFilter<"AlbumArtist"> | string
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    artist?: XOR<ArtistScalarRelationFilter, ArtistWhereInput>
  }, "id" | "albumId_artistId">

  export type AlbumArtistOrderByWithAggregationInput = {
    id?: SortOrder
    albumId?: SortOrder
    artistId?: SortOrder
    _count?: AlbumArtistCountOrderByAggregateInput
    _max?: AlbumArtistMaxOrderByAggregateInput
    _min?: AlbumArtistMinOrderByAggregateInput
  }

  export type AlbumArtistScalarWhereWithAggregatesInput = {
    AND?: AlbumArtistScalarWhereWithAggregatesInput | AlbumArtistScalarWhereWithAggregatesInput[]
    OR?: AlbumArtistScalarWhereWithAggregatesInput[]
    NOT?: AlbumArtistScalarWhereWithAggregatesInput | AlbumArtistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AlbumArtist"> | string
    albumId?: StringWithAggregatesFilter<"AlbumArtist"> | string
    artistId?: StringWithAggregatesFilter<"AlbumArtist"> | string
  }

  export type SongArtistWhereInput = {
    AND?: SongArtistWhereInput | SongArtistWhereInput[]
    OR?: SongArtistWhereInput[]
    NOT?: SongArtistWhereInput | SongArtistWhereInput[]
    id?: StringFilter<"SongArtist"> | string
    songId?: StringFilter<"SongArtist"> | string
    artistId?: StringFilter<"SongArtist"> | string
    song?: XOR<SongScalarRelationFilter, SongWhereInput>
    artist?: XOR<ArtistScalarRelationFilter, ArtistWhereInput>
  }

  export type SongArtistOrderByWithRelationInput = {
    id?: SortOrder
    songId?: SortOrder
    artistId?: SortOrder
    song?: SongOrderByWithRelationInput
    artist?: ArtistOrderByWithRelationInput
  }

  export type SongArtistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    songId_artistId?: SongArtistSongIdArtistIdCompoundUniqueInput
    AND?: SongArtistWhereInput | SongArtistWhereInput[]
    OR?: SongArtistWhereInput[]
    NOT?: SongArtistWhereInput | SongArtistWhereInput[]
    songId?: StringFilter<"SongArtist"> | string
    artistId?: StringFilter<"SongArtist"> | string
    song?: XOR<SongScalarRelationFilter, SongWhereInput>
    artist?: XOR<ArtistScalarRelationFilter, ArtistWhereInput>
  }, "id" | "songId_artistId">

  export type SongArtistOrderByWithAggregationInput = {
    id?: SortOrder
    songId?: SortOrder
    artistId?: SortOrder
    _count?: SongArtistCountOrderByAggregateInput
    _max?: SongArtistMaxOrderByAggregateInput
    _min?: SongArtistMinOrderByAggregateInput
  }

  export type SongArtistScalarWhereWithAggregatesInput = {
    AND?: SongArtistScalarWhereWithAggregatesInput | SongArtistScalarWhereWithAggregatesInput[]
    OR?: SongArtistScalarWhereWithAggregatesInput[]
    NOT?: SongArtistScalarWhereWithAggregatesInput | SongArtistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SongArtist"> | string
    songId?: StringWithAggregatesFilter<"SongArtist"> | string
    artistId?: StringWithAggregatesFilter<"SongArtist"> | string
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: StringFilter<"Follow"> | string
    userId?: StringFilter<"Follow"> | string
    artistId?: StringFilter<"Follow"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    artist?: XOR<ArtistScalarRelationFilter, ArtistWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    user?: UserOrderByWithRelationInput
    artist?: ArtistOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_artistId?: FollowUserIdArtistIdCompoundUniqueInput
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    userId?: StringFilter<"Follow"> | string
    artistId?: StringFilter<"Follow"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    artist?: XOR<ArtistScalarRelationFilter, ArtistWhereInput>
  }, "id" | "userId_artistId">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Follow"> | string
    userId?: StringWithAggregatesFilter<"Follow"> | string
    artistId?: StringWithAggregatesFilter<"Follow"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
    listenLogs?: ListenLogCreateNestedManyWithoutUserInput
    follows?: FollowCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
    listenLogs?: ListenLogUncheckedCreateNestedManyWithoutUserInput
    follows?: FollowUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
    listenLogs?: ListenLogUpdateManyWithoutUserNestedInput
    follows?: FollowUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
    listenLogs?: ListenLogUncheckedUpdateManyWithoutUserNestedInput
    follows?: FollowUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
  }

  export type UserUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
  }

  export type SongCreateInput = {
    id?: string
    name: string
    previewUrl?: string | null
    album: AlbumCreateNestedOneWithoutTracksInput
    songArtists?: SongArtistCreateNestedManyWithoutSongInput
    listenLogs?: ListenLogCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateInput = {
    id?: string
    name: string
    previewUrl?: string | null
    albumId: string
    songArtists?: SongArtistUncheckedCreateNestedManyWithoutSongInput
    listenLogs?: ListenLogUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    album?: AlbumUpdateOneRequiredWithoutTracksNestedInput
    songArtists?: SongArtistUpdateManyWithoutSongNestedInput
    listenLogs?: ListenLogUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: StringFieldUpdateOperationsInput | string
    songArtists?: SongArtistUncheckedUpdateManyWithoutSongNestedInput
    listenLogs?: ListenLogUncheckedUpdateManyWithoutSongNestedInput
  }

  export type SongCreateManyInput = {
    id?: string
    name: string
    previewUrl?: string | null
    albumId: string
  }

  export type SongUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SongUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumCreateInput = {
    id?: string
    name: string
    coverUrl?: string | null
    tracks?: SongCreateNestedManyWithoutAlbumInput
    albumArtists?: AlbumArtistCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: string
    name: string
    coverUrl?: string | null
    tracks?: SongUncheckedCreateNestedManyWithoutAlbumInput
    albumArtists?: AlbumArtistUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tracks?: SongUpdateManyWithoutAlbumNestedInput
    albumArtists?: AlbumArtistUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tracks?: SongUncheckedUpdateManyWithoutAlbumNestedInput
    albumArtists?: AlbumArtistUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: string
    name: string
    coverUrl?: string | null
  }

  export type AlbumUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtistCreateInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    songArtists?: SongArtistCreateNestedManyWithoutArtistInput
    albumArtists?: AlbumArtistCreateNestedManyWithoutArtistInput
    followedBy?: FollowCreateNestedManyWithoutArtistInput
  }

  export type ArtistUncheckedCreateInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    songArtists?: SongArtistUncheckedCreateNestedManyWithoutArtistInput
    albumArtists?: AlbumArtistUncheckedCreateNestedManyWithoutArtistInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutArtistInput
  }

  export type ArtistUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    songArtists?: SongArtistUpdateManyWithoutArtistNestedInput
    albumArtists?: AlbumArtistUpdateManyWithoutArtistNestedInput
    followedBy?: FollowUpdateManyWithoutArtistNestedInput
  }

  export type ArtistUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    songArtists?: SongArtistUncheckedUpdateManyWithoutArtistNestedInput
    albumArtists?: AlbumArtistUncheckedUpdateManyWithoutArtistNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutArtistNestedInput
  }

  export type ArtistCreateManyInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
  }

  export type ArtistUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
  }

  export type ArtistUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
  }

  export type ListenLogCreateInput = {
    id?: string
    timestamp?: Date | string
    song: SongCreateNestedOneWithoutListenLogsInput
    user: UserCreateNestedOneWithoutListenLogsInput
  }

  export type ListenLogUncheckedCreateInput = {
    id?: string
    songId: string
    userId: string
    timestamp?: Date | string
  }

  export type ListenLogUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    song?: SongUpdateOneRequiredWithoutListenLogsNestedInput
    user?: UserUpdateOneRequiredWithoutListenLogsNestedInput
  }

  export type ListenLogUncheckedUpdateInput = {
    songId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListenLogCreateManyInput = {
    id?: string
    songId: string
    userId: string
    timestamp?: Date | string
  }

  export type ListenLogUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListenLogUncheckedUpdateManyInput = {
    songId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumArtistCreateInput = {
    id?: string
    album: AlbumCreateNestedOneWithoutAlbumArtistsInput
    artist: ArtistCreateNestedOneWithoutAlbumArtistsInput
  }

  export type AlbumArtistUncheckedCreateInput = {
    id?: string
    albumId: string
    artistId: string
  }

  export type AlbumArtistUpdateInput = {
    album?: AlbumUpdateOneRequiredWithoutAlbumArtistsNestedInput
    artist?: ArtistUpdateOneRequiredWithoutAlbumArtistsNestedInput
  }

  export type AlbumArtistUncheckedUpdateInput = {
    albumId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumArtistCreateManyInput = {
    id?: string
    albumId: string
    artistId: string
  }

  export type AlbumArtistUpdateManyMutationInput = {

  }

  export type AlbumArtistUncheckedUpdateManyInput = {
    albumId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type SongArtistCreateInput = {
    id?: string
    song: SongCreateNestedOneWithoutSongArtistsInput
    artist: ArtistCreateNestedOneWithoutSongArtistsInput
  }

  export type SongArtistUncheckedCreateInput = {
    id?: string
    songId: string
    artistId: string
  }

  export type SongArtistUpdateInput = {
    song?: SongUpdateOneRequiredWithoutSongArtistsNestedInput
    artist?: ArtistUpdateOneRequiredWithoutSongArtistsNestedInput
  }

  export type SongArtistUncheckedUpdateInput = {
    songId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type SongArtistCreateManyInput = {
    id?: string
    songId: string
    artistId: string
  }

  export type SongArtistUpdateManyMutationInput = {

  }

  export type SongArtistUncheckedUpdateManyInput = {
    songId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutFollowsInput
    artist: ArtistCreateNestedOneWithoutFollowedByInput
  }

  export type FollowUncheckedCreateInput = {
    id?: string
    userId: string
    artistId: string
  }

  export type FollowUpdateInput = {
    user?: UserUpdateOneRequiredWithoutFollowsNestedInput
    artist?: ArtistUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateManyInput = {
    id?: string
    userId: string
    artistId: string
  }

  export type FollowUpdateManyMutationInput = {

  }

  export type FollowUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ListenLogListRelationFilter = {
    every?: ListenLogWhereInput
    some?: ListenLogWhereInput
    none?: ListenLogWhereInput
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type ListenLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    followedArtists?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type AlbumScalarRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type SongArtistListRelationFilter = {
    every?: SongArtistWhereInput
    some?: SongArtistWhereInput
    none?: SongArtistWhereInput
  }

  export type SongArtistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SongCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    previewUrl?: SortOrder
    albumId?: SortOrder
  }

  export type SongMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    previewUrl?: SortOrder
    albumId?: SortOrder
  }

  export type SongMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    previewUrl?: SortOrder
    albumId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type SongListRelationFilter = {
    every?: SongWhereInput
    some?: SongWhereInput
    none?: SongWhereInput
  }

  export type AlbumArtistListRelationFilter = {
    every?: AlbumArtistWhereInput
    some?: AlbumArtistWhereInput
    none?: AlbumArtistWhereInput
  }

  export type SongOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumArtistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
  }

  export type ArtistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
    topSongIds?: SortOrder
  }

  export type ArtistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
  }

  export type ArtistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coverUrl?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SongScalarRelationFilter = {
    is?: SongWhereInput
    isNot?: SongWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ListenLogCountOrderByAggregateInput = {
    id?: SortOrder
    songId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type ListenLogMaxOrderByAggregateInput = {
    id?: SortOrder
    songId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type ListenLogMinOrderByAggregateInput = {
    id?: SortOrder
    songId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ArtistScalarRelationFilter = {
    is?: ArtistWhereInput
    isNot?: ArtistWhereInput
  }

  export type AlbumArtistAlbumIdArtistIdCompoundUniqueInput = {
    albumId: string
    artistId: string
  }

  export type AlbumArtistCountOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    artistId?: SortOrder
  }

  export type AlbumArtistMaxOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    artistId?: SortOrder
  }

  export type AlbumArtistMinOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    artistId?: SortOrder
  }

  export type SongArtistSongIdArtistIdCompoundUniqueInput = {
    songId: string
    artistId: string
  }

  export type SongArtistCountOrderByAggregateInput = {
    id?: SortOrder
    songId?: SortOrder
    artistId?: SortOrder
  }

  export type SongArtistMaxOrderByAggregateInput = {
    id?: SortOrder
    songId?: SortOrder
    artistId?: SortOrder
  }

  export type SongArtistMinOrderByAggregateInput = {
    id?: SortOrder
    songId?: SortOrder
    artistId?: SortOrder
  }

  export type FollowUserIdArtistIdCompoundUniqueInput = {
    userId: string
    artistId: string
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artistId?: SortOrder
  }

  export type UserCreatefollowedArtistsInput = {
    set: string[]
  }

  export type ListenLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ListenLogCreateWithoutUserInput, ListenLogUncheckedCreateWithoutUserInput> | ListenLogCreateWithoutUserInput[] | ListenLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutUserInput | ListenLogCreateOrConnectWithoutUserInput[]
    createMany?: ListenLogCreateManyUserInputEnvelope
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowCreateWithoutUserInput, FollowUncheckedCreateWithoutUserInput> | FollowCreateWithoutUserInput[] | FollowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutUserInput | FollowCreateOrConnectWithoutUserInput[]
    createMany?: FollowCreateManyUserInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ListenLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ListenLogCreateWithoutUserInput, ListenLogUncheckedCreateWithoutUserInput> | ListenLogCreateWithoutUserInput[] | ListenLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutUserInput | ListenLogCreateOrConnectWithoutUserInput[]
    createMany?: ListenLogCreateManyUserInputEnvelope
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowCreateWithoutUserInput, FollowUncheckedCreateWithoutUserInput> | FollowCreateWithoutUserInput[] | FollowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutUserInput | FollowCreateOrConnectWithoutUserInput[]
    createMany?: FollowCreateManyUserInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdatefollowedArtistsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ListenLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ListenLogCreateWithoutUserInput, ListenLogUncheckedCreateWithoutUserInput> | ListenLogCreateWithoutUserInput[] | ListenLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutUserInput | ListenLogCreateOrConnectWithoutUserInput[]
    upsert?: ListenLogUpsertWithWhereUniqueWithoutUserInput | ListenLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ListenLogCreateManyUserInputEnvelope
    set?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    disconnect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    delete?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    update?: ListenLogUpdateWithWhereUniqueWithoutUserInput | ListenLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ListenLogUpdateManyWithWhereWithoutUserInput | ListenLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ListenLogScalarWhereInput | ListenLogScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowCreateWithoutUserInput, FollowUncheckedCreateWithoutUserInput> | FollowCreateWithoutUserInput[] | FollowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutUserInput | FollowCreateOrConnectWithoutUserInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutUserInput | FollowUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowCreateManyUserInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutUserInput | FollowUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutUserInput | FollowUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ListenLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ListenLogCreateWithoutUserInput, ListenLogUncheckedCreateWithoutUserInput> | ListenLogCreateWithoutUserInput[] | ListenLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutUserInput | ListenLogCreateOrConnectWithoutUserInput[]
    upsert?: ListenLogUpsertWithWhereUniqueWithoutUserInput | ListenLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ListenLogCreateManyUserInputEnvelope
    set?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    disconnect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    delete?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    update?: ListenLogUpdateWithWhereUniqueWithoutUserInput | ListenLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ListenLogUpdateManyWithWhereWithoutUserInput | ListenLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ListenLogScalarWhereInput | ListenLogScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowCreateWithoutUserInput, FollowUncheckedCreateWithoutUserInput> | FollowCreateWithoutUserInput[] | FollowUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutUserInput | FollowCreateOrConnectWithoutUserInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutUserInput | FollowUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowCreateManyUserInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutUserInput | FollowUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutUserInput | FollowUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutTracksInput = {
    create?: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutTracksInput
    connect?: AlbumWhereUniqueInput
  }

  export type SongArtistCreateNestedManyWithoutSongInput = {
    create?: XOR<SongArtistCreateWithoutSongInput, SongArtistUncheckedCreateWithoutSongInput> | SongArtistCreateWithoutSongInput[] | SongArtistUncheckedCreateWithoutSongInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutSongInput | SongArtistCreateOrConnectWithoutSongInput[]
    createMany?: SongArtistCreateManySongInputEnvelope
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
  }

  export type ListenLogCreateNestedManyWithoutSongInput = {
    create?: XOR<ListenLogCreateWithoutSongInput, ListenLogUncheckedCreateWithoutSongInput> | ListenLogCreateWithoutSongInput[] | ListenLogUncheckedCreateWithoutSongInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutSongInput | ListenLogCreateOrConnectWithoutSongInput[]
    createMany?: ListenLogCreateManySongInputEnvelope
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
  }

  export type SongArtistUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<SongArtistCreateWithoutSongInput, SongArtistUncheckedCreateWithoutSongInput> | SongArtistCreateWithoutSongInput[] | SongArtistUncheckedCreateWithoutSongInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutSongInput | SongArtistCreateOrConnectWithoutSongInput[]
    createMany?: SongArtistCreateManySongInputEnvelope
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
  }

  export type ListenLogUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<ListenLogCreateWithoutSongInput, ListenLogUncheckedCreateWithoutSongInput> | ListenLogCreateWithoutSongInput[] | ListenLogUncheckedCreateWithoutSongInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutSongInput | ListenLogCreateOrConnectWithoutSongInput[]
    createMany?: ListenLogCreateManySongInputEnvelope
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type AlbumUpdateOneRequiredWithoutTracksNestedInput = {
    create?: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutTracksInput
    upsert?: AlbumUpsertWithoutTracksInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutTracksInput, AlbumUpdateWithoutTracksInput>, AlbumUncheckedUpdateWithoutTracksInput>
  }

  export type SongArtistUpdateManyWithoutSongNestedInput = {
    create?: XOR<SongArtistCreateWithoutSongInput, SongArtistUncheckedCreateWithoutSongInput> | SongArtistCreateWithoutSongInput[] | SongArtistUncheckedCreateWithoutSongInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutSongInput | SongArtistCreateOrConnectWithoutSongInput[]
    upsert?: SongArtistUpsertWithWhereUniqueWithoutSongInput | SongArtistUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: SongArtistCreateManySongInputEnvelope
    set?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    disconnect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    delete?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    update?: SongArtistUpdateWithWhereUniqueWithoutSongInput | SongArtistUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: SongArtistUpdateManyWithWhereWithoutSongInput | SongArtistUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: SongArtistScalarWhereInput | SongArtistScalarWhereInput[]
  }

  export type ListenLogUpdateManyWithoutSongNestedInput = {
    create?: XOR<ListenLogCreateWithoutSongInput, ListenLogUncheckedCreateWithoutSongInput> | ListenLogCreateWithoutSongInput[] | ListenLogUncheckedCreateWithoutSongInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutSongInput | ListenLogCreateOrConnectWithoutSongInput[]
    upsert?: ListenLogUpsertWithWhereUniqueWithoutSongInput | ListenLogUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: ListenLogCreateManySongInputEnvelope
    set?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    disconnect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    delete?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    update?: ListenLogUpdateWithWhereUniqueWithoutSongInput | ListenLogUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: ListenLogUpdateManyWithWhereWithoutSongInput | ListenLogUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: ListenLogScalarWhereInput | ListenLogScalarWhereInput[]
  }

  export type SongArtistUncheckedUpdateManyWithoutSongNestedInput = {
    create?: XOR<SongArtistCreateWithoutSongInput, SongArtistUncheckedCreateWithoutSongInput> | SongArtistCreateWithoutSongInput[] | SongArtistUncheckedCreateWithoutSongInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutSongInput | SongArtistCreateOrConnectWithoutSongInput[]
    upsert?: SongArtistUpsertWithWhereUniqueWithoutSongInput | SongArtistUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: SongArtistCreateManySongInputEnvelope
    set?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    disconnect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    delete?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    update?: SongArtistUpdateWithWhereUniqueWithoutSongInput | SongArtistUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: SongArtistUpdateManyWithWhereWithoutSongInput | SongArtistUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: SongArtistScalarWhereInput | SongArtistScalarWhereInput[]
  }

  export type ListenLogUncheckedUpdateManyWithoutSongNestedInput = {
    create?: XOR<ListenLogCreateWithoutSongInput, ListenLogUncheckedCreateWithoutSongInput> | ListenLogCreateWithoutSongInput[] | ListenLogUncheckedCreateWithoutSongInput[]
    connectOrCreate?: ListenLogCreateOrConnectWithoutSongInput | ListenLogCreateOrConnectWithoutSongInput[]
    upsert?: ListenLogUpsertWithWhereUniqueWithoutSongInput | ListenLogUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: ListenLogCreateManySongInputEnvelope
    set?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    disconnect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    delete?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    connect?: ListenLogWhereUniqueInput | ListenLogWhereUniqueInput[]
    update?: ListenLogUpdateWithWhereUniqueWithoutSongInput | ListenLogUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: ListenLogUpdateManyWithWhereWithoutSongInput | ListenLogUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: ListenLogScalarWhereInput | ListenLogScalarWhereInput[]
  }

  export type SongCreateNestedManyWithoutAlbumInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
  }

  export type AlbumArtistCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumArtistCreateWithoutAlbumInput, AlbumArtistUncheckedCreateWithoutAlbumInput> | AlbumArtistCreateWithoutAlbumInput[] | AlbumArtistUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutAlbumInput | AlbumArtistCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumArtistCreateManyAlbumInputEnvelope
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
  }

  export type SongUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
  }

  export type AlbumArtistUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumArtistCreateWithoutAlbumInput, AlbumArtistUncheckedCreateWithoutAlbumInput> | AlbumArtistCreateWithoutAlbumInput[] | AlbumArtistUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutAlbumInput | AlbumArtistCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumArtistCreateManyAlbumInputEnvelope
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
  }

  export type SongUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    upsert?: SongUpsertWithWhereUniqueWithoutAlbumInput | SongUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    set?: SongWhereUniqueInput | SongWhereUniqueInput[]
    disconnect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    delete?: SongWhereUniqueInput | SongWhereUniqueInput[]
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    update?: SongUpdateWithWhereUniqueWithoutAlbumInput | SongUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: SongUpdateManyWithWhereWithoutAlbumInput | SongUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: SongScalarWhereInput | SongScalarWhereInput[]
  }

  export type AlbumArtistUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumArtistCreateWithoutAlbumInput, AlbumArtistUncheckedCreateWithoutAlbumInput> | AlbumArtistCreateWithoutAlbumInput[] | AlbumArtistUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutAlbumInput | AlbumArtistCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumArtistUpsertWithWhereUniqueWithoutAlbumInput | AlbumArtistUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumArtistCreateManyAlbumInputEnvelope
    set?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    disconnect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    delete?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    update?: AlbumArtistUpdateWithWhereUniqueWithoutAlbumInput | AlbumArtistUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumArtistUpdateManyWithWhereWithoutAlbumInput | AlbumArtistUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumArtistScalarWhereInput | AlbumArtistScalarWhereInput[]
  }

  export type SongUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    upsert?: SongUpsertWithWhereUniqueWithoutAlbumInput | SongUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    set?: SongWhereUniqueInput | SongWhereUniqueInput[]
    disconnect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    delete?: SongWhereUniqueInput | SongWhereUniqueInput[]
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    update?: SongUpdateWithWhereUniqueWithoutAlbumInput | SongUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: SongUpdateManyWithWhereWithoutAlbumInput | SongUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: SongScalarWhereInput | SongScalarWhereInput[]
  }

  export type AlbumArtistUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumArtistCreateWithoutAlbumInput, AlbumArtistUncheckedCreateWithoutAlbumInput> | AlbumArtistCreateWithoutAlbumInput[] | AlbumArtistUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutAlbumInput | AlbumArtistCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumArtistUpsertWithWhereUniqueWithoutAlbumInput | AlbumArtistUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumArtistCreateManyAlbumInputEnvelope
    set?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    disconnect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    delete?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    update?: AlbumArtistUpdateWithWhereUniqueWithoutAlbumInput | AlbumArtistUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumArtistUpdateManyWithWhereWithoutAlbumInput | AlbumArtistUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumArtistScalarWhereInput | AlbumArtistScalarWhereInput[]
  }

  export type ArtistCreatetopSongIdsInput = {
    set: string[]
  }

  export type SongArtistCreateNestedManyWithoutArtistInput = {
    create?: XOR<SongArtistCreateWithoutArtistInput, SongArtistUncheckedCreateWithoutArtistInput> | SongArtistCreateWithoutArtistInput[] | SongArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutArtistInput | SongArtistCreateOrConnectWithoutArtistInput[]
    createMany?: SongArtistCreateManyArtistInputEnvelope
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
  }

  export type AlbumArtistCreateNestedManyWithoutArtistInput = {
    create?: XOR<AlbumArtistCreateWithoutArtistInput, AlbumArtistUncheckedCreateWithoutArtistInput> | AlbumArtistCreateWithoutArtistInput[] | AlbumArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutArtistInput | AlbumArtistCreateOrConnectWithoutArtistInput[]
    createMany?: AlbumArtistCreateManyArtistInputEnvelope
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutArtistInput = {
    create?: XOR<FollowCreateWithoutArtistInput, FollowUncheckedCreateWithoutArtistInput> | FollowCreateWithoutArtistInput[] | FollowUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutArtistInput | FollowCreateOrConnectWithoutArtistInput[]
    createMany?: FollowCreateManyArtistInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type SongArtistUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<SongArtistCreateWithoutArtistInput, SongArtistUncheckedCreateWithoutArtistInput> | SongArtistCreateWithoutArtistInput[] | SongArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutArtistInput | SongArtistCreateOrConnectWithoutArtistInput[]
    createMany?: SongArtistCreateManyArtistInputEnvelope
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
  }

  export type AlbumArtistUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<AlbumArtistCreateWithoutArtistInput, AlbumArtistUncheckedCreateWithoutArtistInput> | AlbumArtistCreateWithoutArtistInput[] | AlbumArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutArtistInput | AlbumArtistCreateOrConnectWithoutArtistInput[]
    createMany?: AlbumArtistCreateManyArtistInputEnvelope
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<FollowCreateWithoutArtistInput, FollowUncheckedCreateWithoutArtistInput> | FollowCreateWithoutArtistInput[] | FollowUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutArtistInput | FollowCreateOrConnectWithoutArtistInput[]
    createMany?: FollowCreateManyArtistInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ArtistUpdatetopSongIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SongArtistUpdateManyWithoutArtistNestedInput = {
    create?: XOR<SongArtistCreateWithoutArtistInput, SongArtistUncheckedCreateWithoutArtistInput> | SongArtistCreateWithoutArtistInput[] | SongArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutArtistInput | SongArtistCreateOrConnectWithoutArtistInput[]
    upsert?: SongArtistUpsertWithWhereUniqueWithoutArtistInput | SongArtistUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: SongArtistCreateManyArtistInputEnvelope
    set?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    disconnect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    delete?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    update?: SongArtistUpdateWithWhereUniqueWithoutArtistInput | SongArtistUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: SongArtistUpdateManyWithWhereWithoutArtistInput | SongArtistUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: SongArtistScalarWhereInput | SongArtistScalarWhereInput[]
  }

  export type AlbumArtistUpdateManyWithoutArtistNestedInput = {
    create?: XOR<AlbumArtistCreateWithoutArtistInput, AlbumArtistUncheckedCreateWithoutArtistInput> | AlbumArtistCreateWithoutArtistInput[] | AlbumArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutArtistInput | AlbumArtistCreateOrConnectWithoutArtistInput[]
    upsert?: AlbumArtistUpsertWithWhereUniqueWithoutArtistInput | AlbumArtistUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: AlbumArtistCreateManyArtistInputEnvelope
    set?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    disconnect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    delete?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    update?: AlbumArtistUpdateWithWhereUniqueWithoutArtistInput | AlbumArtistUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: AlbumArtistUpdateManyWithWhereWithoutArtistInput | AlbumArtistUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: AlbumArtistScalarWhereInput | AlbumArtistScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutArtistNestedInput = {
    create?: XOR<FollowCreateWithoutArtistInput, FollowUncheckedCreateWithoutArtistInput> | FollowCreateWithoutArtistInput[] | FollowUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutArtistInput | FollowCreateOrConnectWithoutArtistInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutArtistInput | FollowUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: FollowCreateManyArtistInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutArtistInput | FollowUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutArtistInput | FollowUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type SongArtistUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<SongArtistCreateWithoutArtistInput, SongArtistUncheckedCreateWithoutArtistInput> | SongArtistCreateWithoutArtistInput[] | SongArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: SongArtistCreateOrConnectWithoutArtistInput | SongArtistCreateOrConnectWithoutArtistInput[]
    upsert?: SongArtistUpsertWithWhereUniqueWithoutArtistInput | SongArtistUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: SongArtistCreateManyArtistInputEnvelope
    set?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    disconnect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    delete?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    connect?: SongArtistWhereUniqueInput | SongArtistWhereUniqueInput[]
    update?: SongArtistUpdateWithWhereUniqueWithoutArtistInput | SongArtistUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: SongArtistUpdateManyWithWhereWithoutArtistInput | SongArtistUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: SongArtistScalarWhereInput | SongArtistScalarWhereInput[]
  }

  export type AlbumArtistUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<AlbumArtistCreateWithoutArtistInput, AlbumArtistUncheckedCreateWithoutArtistInput> | AlbumArtistCreateWithoutArtistInput[] | AlbumArtistUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: AlbumArtistCreateOrConnectWithoutArtistInput | AlbumArtistCreateOrConnectWithoutArtistInput[]
    upsert?: AlbumArtistUpsertWithWhereUniqueWithoutArtistInput | AlbumArtistUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: AlbumArtistCreateManyArtistInputEnvelope
    set?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    disconnect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    delete?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    connect?: AlbumArtistWhereUniqueInput | AlbumArtistWhereUniqueInput[]
    update?: AlbumArtistUpdateWithWhereUniqueWithoutArtistInput | AlbumArtistUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: AlbumArtistUpdateManyWithWhereWithoutArtistInput | AlbumArtistUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: AlbumArtistScalarWhereInput | AlbumArtistScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<FollowCreateWithoutArtistInput, FollowUncheckedCreateWithoutArtistInput> | FollowCreateWithoutArtistInput[] | FollowUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutArtistInput | FollowCreateOrConnectWithoutArtistInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutArtistInput | FollowUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: FollowCreateManyArtistInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutArtistInput | FollowUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutArtistInput | FollowUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type SongCreateNestedOneWithoutListenLogsInput = {
    create?: XOR<SongCreateWithoutListenLogsInput, SongUncheckedCreateWithoutListenLogsInput>
    connectOrCreate?: SongCreateOrConnectWithoutListenLogsInput
    connect?: SongWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutListenLogsInput = {
    create?: XOR<UserCreateWithoutListenLogsInput, UserUncheckedCreateWithoutListenLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutListenLogsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SongUpdateOneRequiredWithoutListenLogsNestedInput = {
    create?: XOR<SongCreateWithoutListenLogsInput, SongUncheckedCreateWithoutListenLogsInput>
    connectOrCreate?: SongCreateOrConnectWithoutListenLogsInput
    upsert?: SongUpsertWithoutListenLogsInput
    connect?: SongWhereUniqueInput
    update?: XOR<XOR<SongUpdateToOneWithWhereWithoutListenLogsInput, SongUpdateWithoutListenLogsInput>, SongUncheckedUpdateWithoutListenLogsInput>
  }

  export type UserUpdateOneRequiredWithoutListenLogsNestedInput = {
    create?: XOR<UserCreateWithoutListenLogsInput, UserUncheckedCreateWithoutListenLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutListenLogsInput
    upsert?: UserUpsertWithoutListenLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutListenLogsInput, UserUpdateWithoutListenLogsInput>, UserUncheckedUpdateWithoutListenLogsInput>
  }

  export type AlbumCreateNestedOneWithoutAlbumArtistsInput = {
    create?: XOR<AlbumCreateWithoutAlbumArtistsInput, AlbumUncheckedCreateWithoutAlbumArtistsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutAlbumArtistsInput
    connect?: AlbumWhereUniqueInput
  }

  export type ArtistCreateNestedOneWithoutAlbumArtistsInput = {
    create?: XOR<ArtistCreateWithoutAlbumArtistsInput, ArtistUncheckedCreateWithoutAlbumArtistsInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutAlbumArtistsInput
    connect?: ArtistWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutAlbumArtistsNestedInput = {
    create?: XOR<AlbumCreateWithoutAlbumArtistsInput, AlbumUncheckedCreateWithoutAlbumArtistsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutAlbumArtistsInput
    upsert?: AlbumUpsertWithoutAlbumArtistsInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutAlbumArtistsInput, AlbumUpdateWithoutAlbumArtistsInput>, AlbumUncheckedUpdateWithoutAlbumArtistsInput>
  }

  export type ArtistUpdateOneRequiredWithoutAlbumArtistsNestedInput = {
    create?: XOR<ArtistCreateWithoutAlbumArtistsInput, ArtistUncheckedCreateWithoutAlbumArtistsInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutAlbumArtistsInput
    upsert?: ArtistUpsertWithoutAlbumArtistsInput
    connect?: ArtistWhereUniqueInput
    update?: XOR<XOR<ArtistUpdateToOneWithWhereWithoutAlbumArtistsInput, ArtistUpdateWithoutAlbumArtistsInput>, ArtistUncheckedUpdateWithoutAlbumArtistsInput>
  }

  export type SongCreateNestedOneWithoutSongArtistsInput = {
    create?: XOR<SongCreateWithoutSongArtistsInput, SongUncheckedCreateWithoutSongArtistsInput>
    connectOrCreate?: SongCreateOrConnectWithoutSongArtistsInput
    connect?: SongWhereUniqueInput
  }

  export type ArtistCreateNestedOneWithoutSongArtistsInput = {
    create?: XOR<ArtistCreateWithoutSongArtistsInput, ArtistUncheckedCreateWithoutSongArtistsInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutSongArtistsInput
    connect?: ArtistWhereUniqueInput
  }

  export type SongUpdateOneRequiredWithoutSongArtistsNestedInput = {
    create?: XOR<SongCreateWithoutSongArtistsInput, SongUncheckedCreateWithoutSongArtistsInput>
    connectOrCreate?: SongCreateOrConnectWithoutSongArtistsInput
    upsert?: SongUpsertWithoutSongArtistsInput
    connect?: SongWhereUniqueInput
    update?: XOR<XOR<SongUpdateToOneWithWhereWithoutSongArtistsInput, SongUpdateWithoutSongArtistsInput>, SongUncheckedUpdateWithoutSongArtistsInput>
  }

  export type ArtistUpdateOneRequiredWithoutSongArtistsNestedInput = {
    create?: XOR<ArtistCreateWithoutSongArtistsInput, ArtistUncheckedCreateWithoutSongArtistsInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutSongArtistsInput
    upsert?: ArtistUpsertWithoutSongArtistsInput
    connect?: ArtistWhereUniqueInput
    update?: XOR<XOR<ArtistUpdateToOneWithWhereWithoutSongArtistsInput, ArtistUpdateWithoutSongArtistsInput>, ArtistUncheckedUpdateWithoutSongArtistsInput>
  }

  export type UserCreateNestedOneWithoutFollowsInput = {
    create?: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowsInput
    connect?: UserWhereUniqueInput
  }

  export type ArtistCreateNestedOneWithoutFollowedByInput = {
    create?: XOR<ArtistCreateWithoutFollowedByInput, ArtistUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutFollowedByInput
    connect?: ArtistWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowsNestedInput = {
    create?: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowsInput
    upsert?: UserUpsertWithoutFollowsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowsInput, UserUpdateWithoutFollowsInput>, UserUncheckedUpdateWithoutFollowsInput>
  }

  export type ArtistUpdateOneRequiredWithoutFollowedByNestedInput = {
    create?: XOR<ArtistCreateWithoutFollowedByInput, ArtistUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutFollowedByInput
    upsert?: ArtistUpsertWithoutFollowedByInput
    connect?: ArtistWhereUniqueInput
    update?: XOR<XOR<ArtistUpdateToOneWithWhereWithoutFollowedByInput, ArtistUpdateWithoutFollowedByInput>, ArtistUncheckedUpdateWithoutFollowedByInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ListenLogCreateWithoutUserInput = {
    id?: string
    timestamp?: Date | string
    song: SongCreateNestedOneWithoutListenLogsInput
  }

  export type ListenLogUncheckedCreateWithoutUserInput = {
    id?: string
    songId: string
    timestamp?: Date | string
  }

  export type ListenLogCreateOrConnectWithoutUserInput = {
    where: ListenLogWhereUniqueInput
    create: XOR<ListenLogCreateWithoutUserInput, ListenLogUncheckedCreateWithoutUserInput>
  }

  export type ListenLogCreateManyUserInputEnvelope = {
    data: ListenLogCreateManyUserInput | ListenLogCreateManyUserInput[]
  }

  export type FollowCreateWithoutUserInput = {
    id?: string
    artist: ArtistCreateNestedOneWithoutFollowedByInput
  }

  export type FollowUncheckedCreateWithoutUserInput = {
    id?: string
    artistId: string
  }

  export type FollowCreateOrConnectWithoutUserInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutUserInput, FollowUncheckedCreateWithoutUserInput>
  }

  export type FollowCreateManyUserInputEnvelope = {
    data: FollowCreateManyUserInput | FollowCreateManyUserInput[]
  }

  export type ListenLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ListenLogWhereUniqueInput
    update: XOR<ListenLogUpdateWithoutUserInput, ListenLogUncheckedUpdateWithoutUserInput>
    create: XOR<ListenLogCreateWithoutUserInput, ListenLogUncheckedCreateWithoutUserInput>
  }

  export type ListenLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ListenLogWhereUniqueInput
    data: XOR<ListenLogUpdateWithoutUserInput, ListenLogUncheckedUpdateWithoutUserInput>
  }

  export type ListenLogUpdateManyWithWhereWithoutUserInput = {
    where: ListenLogScalarWhereInput
    data: XOR<ListenLogUpdateManyMutationInput, ListenLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ListenLogScalarWhereInput = {
    AND?: ListenLogScalarWhereInput | ListenLogScalarWhereInput[]
    OR?: ListenLogScalarWhereInput[]
    NOT?: ListenLogScalarWhereInput | ListenLogScalarWhereInput[]
    id?: StringFilter<"ListenLog"> | string
    songId?: StringFilter<"ListenLog"> | string
    userId?: StringFilter<"ListenLog"> | string
    timestamp?: DateTimeFilter<"ListenLog"> | Date | string
  }

  export type FollowUpsertWithWhereUniqueWithoutUserInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutUserInput, FollowUncheckedUpdateWithoutUserInput>
    create: XOR<FollowCreateWithoutUserInput, FollowUncheckedCreateWithoutUserInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutUserInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutUserInput, FollowUncheckedUpdateWithoutUserInput>
  }

  export type FollowUpdateManyWithWhereWithoutUserInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutUserInput>
  }

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[]
    OR?: FollowScalarWhereInput[]
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[]
    id?: StringFilter<"Follow"> | string
    userId?: StringFilter<"Follow"> | string
    artistId?: StringFilter<"Follow"> | string
  }

  export type AlbumCreateWithoutTracksInput = {
    id?: string
    name: string
    coverUrl?: string | null
    albumArtists?: AlbumArtistCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutTracksInput = {
    id?: string
    name: string
    coverUrl?: string | null
    albumArtists?: AlbumArtistUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutTracksInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
  }

  export type SongArtistCreateWithoutSongInput = {
    id?: string
    artist: ArtistCreateNestedOneWithoutSongArtistsInput
  }

  export type SongArtistUncheckedCreateWithoutSongInput = {
    id?: string
    artistId: string
  }

  export type SongArtistCreateOrConnectWithoutSongInput = {
    where: SongArtistWhereUniqueInput
    create: XOR<SongArtistCreateWithoutSongInput, SongArtistUncheckedCreateWithoutSongInput>
  }

  export type SongArtistCreateManySongInputEnvelope = {
    data: SongArtistCreateManySongInput | SongArtistCreateManySongInput[]
  }

  export type ListenLogCreateWithoutSongInput = {
    id?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutListenLogsInput
  }

  export type ListenLogUncheckedCreateWithoutSongInput = {
    id?: string
    userId: string
    timestamp?: Date | string
  }

  export type ListenLogCreateOrConnectWithoutSongInput = {
    where: ListenLogWhereUniqueInput
    create: XOR<ListenLogCreateWithoutSongInput, ListenLogUncheckedCreateWithoutSongInput>
  }

  export type ListenLogCreateManySongInputEnvelope = {
    data: ListenLogCreateManySongInput | ListenLogCreateManySongInput[]
  }

  export type AlbumUpsertWithoutTracksInput = {
    update: XOR<AlbumUpdateWithoutTracksInput, AlbumUncheckedUpdateWithoutTracksInput>
    create: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutTracksInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutTracksInput, AlbumUncheckedUpdateWithoutTracksInput>
  }

  export type AlbumUpdateWithoutTracksInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    albumArtists?: AlbumArtistUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutTracksInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    albumArtists?: AlbumArtistUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type SongArtistUpsertWithWhereUniqueWithoutSongInput = {
    where: SongArtistWhereUniqueInput
    update: XOR<SongArtistUpdateWithoutSongInput, SongArtistUncheckedUpdateWithoutSongInput>
    create: XOR<SongArtistCreateWithoutSongInput, SongArtistUncheckedCreateWithoutSongInput>
  }

  export type SongArtistUpdateWithWhereUniqueWithoutSongInput = {
    where: SongArtistWhereUniqueInput
    data: XOR<SongArtistUpdateWithoutSongInput, SongArtistUncheckedUpdateWithoutSongInput>
  }

  export type SongArtistUpdateManyWithWhereWithoutSongInput = {
    where: SongArtistScalarWhereInput
    data: XOR<SongArtistUpdateManyMutationInput, SongArtistUncheckedUpdateManyWithoutSongInput>
  }

  export type SongArtistScalarWhereInput = {
    AND?: SongArtistScalarWhereInput | SongArtistScalarWhereInput[]
    OR?: SongArtistScalarWhereInput[]
    NOT?: SongArtistScalarWhereInput | SongArtistScalarWhereInput[]
    id?: StringFilter<"SongArtist"> | string
    songId?: StringFilter<"SongArtist"> | string
    artistId?: StringFilter<"SongArtist"> | string
  }

  export type ListenLogUpsertWithWhereUniqueWithoutSongInput = {
    where: ListenLogWhereUniqueInput
    update: XOR<ListenLogUpdateWithoutSongInput, ListenLogUncheckedUpdateWithoutSongInput>
    create: XOR<ListenLogCreateWithoutSongInput, ListenLogUncheckedCreateWithoutSongInput>
  }

  export type ListenLogUpdateWithWhereUniqueWithoutSongInput = {
    where: ListenLogWhereUniqueInput
    data: XOR<ListenLogUpdateWithoutSongInput, ListenLogUncheckedUpdateWithoutSongInput>
  }

  export type ListenLogUpdateManyWithWhereWithoutSongInput = {
    where: ListenLogScalarWhereInput
    data: XOR<ListenLogUpdateManyMutationInput, ListenLogUncheckedUpdateManyWithoutSongInput>
  }

  export type SongCreateWithoutAlbumInput = {
    id?: string
    name: string
    previewUrl?: string | null
    songArtists?: SongArtistCreateNestedManyWithoutSongInput
    listenLogs?: ListenLogCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutAlbumInput = {
    id?: string
    name: string
    previewUrl?: string | null
    songArtists?: SongArtistUncheckedCreateNestedManyWithoutSongInput
    listenLogs?: ListenLogUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutAlbumInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput>
  }

  export type SongCreateManyAlbumInputEnvelope = {
    data: SongCreateManyAlbumInput | SongCreateManyAlbumInput[]
  }

  export type AlbumArtistCreateWithoutAlbumInput = {
    id?: string
    artist: ArtistCreateNestedOneWithoutAlbumArtistsInput
  }

  export type AlbumArtistUncheckedCreateWithoutAlbumInput = {
    id?: string
    artistId: string
  }

  export type AlbumArtistCreateOrConnectWithoutAlbumInput = {
    where: AlbumArtistWhereUniqueInput
    create: XOR<AlbumArtistCreateWithoutAlbumInput, AlbumArtistUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumArtistCreateManyAlbumInputEnvelope = {
    data: AlbumArtistCreateManyAlbumInput | AlbumArtistCreateManyAlbumInput[]
  }

  export type SongUpsertWithWhereUniqueWithoutAlbumInput = {
    where: SongWhereUniqueInput
    update: XOR<SongUpdateWithoutAlbumInput, SongUncheckedUpdateWithoutAlbumInput>
    create: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput>
  }

  export type SongUpdateWithWhereUniqueWithoutAlbumInput = {
    where: SongWhereUniqueInput
    data: XOR<SongUpdateWithoutAlbumInput, SongUncheckedUpdateWithoutAlbumInput>
  }

  export type SongUpdateManyWithWhereWithoutAlbumInput = {
    where: SongScalarWhereInput
    data: XOR<SongUpdateManyMutationInput, SongUncheckedUpdateManyWithoutAlbumInput>
  }

  export type SongScalarWhereInput = {
    AND?: SongScalarWhereInput | SongScalarWhereInput[]
    OR?: SongScalarWhereInput[]
    NOT?: SongScalarWhereInput | SongScalarWhereInput[]
    id?: StringFilter<"Song"> | string
    name?: StringFilter<"Song"> | string
    previewUrl?: StringNullableFilter<"Song"> | string | null
    albumId?: StringFilter<"Song"> | string
  }

  export type AlbumArtistUpsertWithWhereUniqueWithoutAlbumInput = {
    where: AlbumArtistWhereUniqueInput
    update: XOR<AlbumArtistUpdateWithoutAlbumInput, AlbumArtistUncheckedUpdateWithoutAlbumInput>
    create: XOR<AlbumArtistCreateWithoutAlbumInput, AlbumArtistUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumArtistUpdateWithWhereUniqueWithoutAlbumInput = {
    where: AlbumArtistWhereUniqueInput
    data: XOR<AlbumArtistUpdateWithoutAlbumInput, AlbumArtistUncheckedUpdateWithoutAlbumInput>
  }

  export type AlbumArtistUpdateManyWithWhereWithoutAlbumInput = {
    where: AlbumArtistScalarWhereInput
    data: XOR<AlbumArtistUpdateManyMutationInput, AlbumArtistUncheckedUpdateManyWithoutAlbumInput>
  }

  export type AlbumArtistScalarWhereInput = {
    AND?: AlbumArtistScalarWhereInput | AlbumArtistScalarWhereInput[]
    OR?: AlbumArtistScalarWhereInput[]
    NOT?: AlbumArtistScalarWhereInput | AlbumArtistScalarWhereInput[]
    id?: StringFilter<"AlbumArtist"> | string
    albumId?: StringFilter<"AlbumArtist"> | string
    artistId?: StringFilter<"AlbumArtist"> | string
  }

  export type SongArtistCreateWithoutArtistInput = {
    id?: string
    song: SongCreateNestedOneWithoutSongArtistsInput
  }

  export type SongArtistUncheckedCreateWithoutArtistInput = {
    id?: string
    songId: string
  }

  export type SongArtistCreateOrConnectWithoutArtistInput = {
    where: SongArtistWhereUniqueInput
    create: XOR<SongArtistCreateWithoutArtistInput, SongArtistUncheckedCreateWithoutArtistInput>
  }

  export type SongArtistCreateManyArtistInputEnvelope = {
    data: SongArtistCreateManyArtistInput | SongArtistCreateManyArtistInput[]
  }

  export type AlbumArtistCreateWithoutArtistInput = {
    id?: string
    album: AlbumCreateNestedOneWithoutAlbumArtistsInput
  }

  export type AlbumArtistUncheckedCreateWithoutArtistInput = {
    id?: string
    albumId: string
  }

  export type AlbumArtistCreateOrConnectWithoutArtistInput = {
    where: AlbumArtistWhereUniqueInput
    create: XOR<AlbumArtistCreateWithoutArtistInput, AlbumArtistUncheckedCreateWithoutArtistInput>
  }

  export type AlbumArtistCreateManyArtistInputEnvelope = {
    data: AlbumArtistCreateManyArtistInput | AlbumArtistCreateManyArtistInput[]
  }

  export type FollowCreateWithoutArtistInput = {
    id?: string
    user: UserCreateNestedOneWithoutFollowsInput
  }

  export type FollowUncheckedCreateWithoutArtistInput = {
    id?: string
    userId: string
  }

  export type FollowCreateOrConnectWithoutArtistInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutArtistInput, FollowUncheckedCreateWithoutArtistInput>
  }

  export type FollowCreateManyArtistInputEnvelope = {
    data: FollowCreateManyArtistInput | FollowCreateManyArtistInput[]
  }

  export type SongArtistUpsertWithWhereUniqueWithoutArtistInput = {
    where: SongArtistWhereUniqueInput
    update: XOR<SongArtistUpdateWithoutArtistInput, SongArtistUncheckedUpdateWithoutArtistInput>
    create: XOR<SongArtistCreateWithoutArtistInput, SongArtistUncheckedCreateWithoutArtistInput>
  }

  export type SongArtistUpdateWithWhereUniqueWithoutArtistInput = {
    where: SongArtistWhereUniqueInput
    data: XOR<SongArtistUpdateWithoutArtistInput, SongArtistUncheckedUpdateWithoutArtistInput>
  }

  export type SongArtistUpdateManyWithWhereWithoutArtistInput = {
    where: SongArtistScalarWhereInput
    data: XOR<SongArtistUpdateManyMutationInput, SongArtistUncheckedUpdateManyWithoutArtistInput>
  }

  export type AlbumArtistUpsertWithWhereUniqueWithoutArtistInput = {
    where: AlbumArtistWhereUniqueInput
    update: XOR<AlbumArtistUpdateWithoutArtistInput, AlbumArtistUncheckedUpdateWithoutArtistInput>
    create: XOR<AlbumArtistCreateWithoutArtistInput, AlbumArtistUncheckedCreateWithoutArtistInput>
  }

  export type AlbumArtistUpdateWithWhereUniqueWithoutArtistInput = {
    where: AlbumArtistWhereUniqueInput
    data: XOR<AlbumArtistUpdateWithoutArtistInput, AlbumArtistUncheckedUpdateWithoutArtistInput>
  }

  export type AlbumArtistUpdateManyWithWhereWithoutArtistInput = {
    where: AlbumArtistScalarWhereInput
    data: XOR<AlbumArtistUpdateManyMutationInput, AlbumArtistUncheckedUpdateManyWithoutArtistInput>
  }

  export type FollowUpsertWithWhereUniqueWithoutArtistInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutArtistInput, FollowUncheckedUpdateWithoutArtistInput>
    create: XOR<FollowCreateWithoutArtistInput, FollowUncheckedCreateWithoutArtistInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutArtistInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutArtistInput, FollowUncheckedUpdateWithoutArtistInput>
  }

  export type FollowUpdateManyWithWhereWithoutArtistInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutArtistInput>
  }

  export type SongCreateWithoutListenLogsInput = {
    id?: string
    name: string
    previewUrl?: string | null
    album: AlbumCreateNestedOneWithoutTracksInput
    songArtists?: SongArtistCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutListenLogsInput = {
    id?: string
    name: string
    previewUrl?: string | null
    albumId: string
    songArtists?: SongArtistUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutListenLogsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutListenLogsInput, SongUncheckedCreateWithoutListenLogsInput>
  }

  export type UserCreateWithoutListenLogsInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
    follows?: FollowCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutListenLogsInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
    follows?: FollowUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutListenLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutListenLogsInput, UserUncheckedCreateWithoutListenLogsInput>
  }

  export type SongUpsertWithoutListenLogsInput = {
    update: XOR<SongUpdateWithoutListenLogsInput, SongUncheckedUpdateWithoutListenLogsInput>
    create: XOR<SongCreateWithoutListenLogsInput, SongUncheckedCreateWithoutListenLogsInput>
    where?: SongWhereInput
  }

  export type SongUpdateToOneWithWhereWithoutListenLogsInput = {
    where?: SongWhereInput
    data: XOR<SongUpdateWithoutListenLogsInput, SongUncheckedUpdateWithoutListenLogsInput>
  }

  export type SongUpdateWithoutListenLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    album?: AlbumUpdateOneRequiredWithoutTracksNestedInput
    songArtists?: SongArtistUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutListenLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: StringFieldUpdateOperationsInput | string
    songArtists?: SongArtistUncheckedUpdateManyWithoutSongNestedInput
  }

  export type UserUpsertWithoutListenLogsInput = {
    update: XOR<UserUpdateWithoutListenLogsInput, UserUncheckedUpdateWithoutListenLogsInput>
    create: XOR<UserCreateWithoutListenLogsInput, UserUncheckedCreateWithoutListenLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutListenLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutListenLogsInput, UserUncheckedUpdateWithoutListenLogsInput>
  }

  export type UserUpdateWithoutListenLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
    follows?: FollowUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutListenLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
    follows?: FollowUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AlbumCreateWithoutAlbumArtistsInput = {
    id?: string
    name: string
    coverUrl?: string | null
    tracks?: SongCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutAlbumArtistsInput = {
    id?: string
    name: string
    coverUrl?: string | null
    tracks?: SongUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutAlbumArtistsInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutAlbumArtistsInput, AlbumUncheckedCreateWithoutAlbumArtistsInput>
  }

  export type ArtistCreateWithoutAlbumArtistsInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    songArtists?: SongArtistCreateNestedManyWithoutArtistInput
    followedBy?: FollowCreateNestedManyWithoutArtistInput
  }

  export type ArtistUncheckedCreateWithoutAlbumArtistsInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    songArtists?: SongArtistUncheckedCreateNestedManyWithoutArtistInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutArtistInput
  }

  export type ArtistCreateOrConnectWithoutAlbumArtistsInput = {
    where: ArtistWhereUniqueInput
    create: XOR<ArtistCreateWithoutAlbumArtistsInput, ArtistUncheckedCreateWithoutAlbumArtistsInput>
  }

  export type AlbumUpsertWithoutAlbumArtistsInput = {
    update: XOR<AlbumUpdateWithoutAlbumArtistsInput, AlbumUncheckedUpdateWithoutAlbumArtistsInput>
    create: XOR<AlbumCreateWithoutAlbumArtistsInput, AlbumUncheckedCreateWithoutAlbumArtistsInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutAlbumArtistsInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutAlbumArtistsInput, AlbumUncheckedUpdateWithoutAlbumArtistsInput>
  }

  export type AlbumUpdateWithoutAlbumArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tracks?: SongUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutAlbumArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tracks?: SongUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type ArtistUpsertWithoutAlbumArtistsInput = {
    update: XOR<ArtistUpdateWithoutAlbumArtistsInput, ArtistUncheckedUpdateWithoutAlbumArtistsInput>
    create: XOR<ArtistCreateWithoutAlbumArtistsInput, ArtistUncheckedCreateWithoutAlbumArtistsInput>
    where?: ArtistWhereInput
  }

  export type ArtistUpdateToOneWithWhereWithoutAlbumArtistsInput = {
    where?: ArtistWhereInput
    data: XOR<ArtistUpdateWithoutAlbumArtistsInput, ArtistUncheckedUpdateWithoutAlbumArtistsInput>
  }

  export type ArtistUpdateWithoutAlbumArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    songArtists?: SongArtistUpdateManyWithoutArtistNestedInput
    followedBy?: FollowUpdateManyWithoutArtistNestedInput
  }

  export type ArtistUncheckedUpdateWithoutAlbumArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    songArtists?: SongArtistUncheckedUpdateManyWithoutArtistNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutArtistNestedInput
  }

  export type SongCreateWithoutSongArtistsInput = {
    id?: string
    name: string
    previewUrl?: string | null
    album: AlbumCreateNestedOneWithoutTracksInput
    listenLogs?: ListenLogCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutSongArtistsInput = {
    id?: string
    name: string
    previewUrl?: string | null
    albumId: string
    listenLogs?: ListenLogUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutSongArtistsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutSongArtistsInput, SongUncheckedCreateWithoutSongArtistsInput>
  }

  export type ArtistCreateWithoutSongArtistsInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    albumArtists?: AlbumArtistCreateNestedManyWithoutArtistInput
    followedBy?: FollowCreateNestedManyWithoutArtistInput
  }

  export type ArtistUncheckedCreateWithoutSongArtistsInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    albumArtists?: AlbumArtistUncheckedCreateNestedManyWithoutArtistInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutArtistInput
  }

  export type ArtistCreateOrConnectWithoutSongArtistsInput = {
    where: ArtistWhereUniqueInput
    create: XOR<ArtistCreateWithoutSongArtistsInput, ArtistUncheckedCreateWithoutSongArtistsInput>
  }

  export type SongUpsertWithoutSongArtistsInput = {
    update: XOR<SongUpdateWithoutSongArtistsInput, SongUncheckedUpdateWithoutSongArtistsInput>
    create: XOR<SongCreateWithoutSongArtistsInput, SongUncheckedCreateWithoutSongArtistsInput>
    where?: SongWhereInput
  }

  export type SongUpdateToOneWithWhereWithoutSongArtistsInput = {
    where?: SongWhereInput
    data: XOR<SongUpdateWithoutSongArtistsInput, SongUncheckedUpdateWithoutSongArtistsInput>
  }

  export type SongUpdateWithoutSongArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    album?: AlbumUpdateOneRequiredWithoutTracksNestedInput
    listenLogs?: ListenLogUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutSongArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: StringFieldUpdateOperationsInput | string
    listenLogs?: ListenLogUncheckedUpdateManyWithoutSongNestedInput
  }

  export type ArtistUpsertWithoutSongArtistsInput = {
    update: XOR<ArtistUpdateWithoutSongArtistsInput, ArtistUncheckedUpdateWithoutSongArtistsInput>
    create: XOR<ArtistCreateWithoutSongArtistsInput, ArtistUncheckedCreateWithoutSongArtistsInput>
    where?: ArtistWhereInput
  }

  export type ArtistUpdateToOneWithWhereWithoutSongArtistsInput = {
    where?: ArtistWhereInput
    data: XOR<ArtistUpdateWithoutSongArtistsInput, ArtistUncheckedUpdateWithoutSongArtistsInput>
  }

  export type ArtistUpdateWithoutSongArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    albumArtists?: AlbumArtistUpdateManyWithoutArtistNestedInput
    followedBy?: FollowUpdateManyWithoutArtistNestedInput
  }

  export type ArtistUncheckedUpdateWithoutSongArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    albumArtists?: AlbumArtistUncheckedUpdateManyWithoutArtistNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutArtistNestedInput
  }

  export type UserCreateWithoutFollowsInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
    listenLogs?: ListenLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowsInput = {
    id?: string
    email: string
    name: string
    followedArtists?: UserCreatefollowedArtistsInput | string[]
    listenLogs?: ListenLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
  }

  export type ArtistCreateWithoutFollowedByInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    songArtists?: SongArtistCreateNestedManyWithoutArtistInput
    albumArtists?: AlbumArtistCreateNestedManyWithoutArtistInput
  }

  export type ArtistUncheckedCreateWithoutFollowedByInput = {
    id?: string
    name: string
    coverUrl?: string | null
    topSongIds?: ArtistCreatetopSongIdsInput | string[]
    songArtists?: SongArtistUncheckedCreateNestedManyWithoutArtistInput
    albumArtists?: AlbumArtistUncheckedCreateNestedManyWithoutArtistInput
  }

  export type ArtistCreateOrConnectWithoutFollowedByInput = {
    where: ArtistWhereUniqueInput
    create: XOR<ArtistCreateWithoutFollowedByInput, ArtistUncheckedCreateWithoutFollowedByInput>
  }

  export type UserUpsertWithoutFollowsInput = {
    update: XOR<UserUpdateWithoutFollowsInput, UserUncheckedUpdateWithoutFollowsInput>
    create: XOR<UserCreateWithoutFollowsInput, UserUncheckedCreateWithoutFollowsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowsInput, UserUncheckedUpdateWithoutFollowsInput>
  }

  export type UserUpdateWithoutFollowsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
    listenLogs?: ListenLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    followedArtists?: UserUpdatefollowedArtistsInput | string[]
    listenLogs?: ListenLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ArtistUpsertWithoutFollowedByInput = {
    update: XOR<ArtistUpdateWithoutFollowedByInput, ArtistUncheckedUpdateWithoutFollowedByInput>
    create: XOR<ArtistCreateWithoutFollowedByInput, ArtistUncheckedCreateWithoutFollowedByInput>
    where?: ArtistWhereInput
  }

  export type ArtistUpdateToOneWithWhereWithoutFollowedByInput = {
    where?: ArtistWhereInput
    data: XOR<ArtistUpdateWithoutFollowedByInput, ArtistUncheckedUpdateWithoutFollowedByInput>
  }

  export type ArtistUpdateWithoutFollowedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    songArtists?: SongArtistUpdateManyWithoutArtistNestedInput
    albumArtists?: AlbumArtistUpdateManyWithoutArtistNestedInput
  }

  export type ArtistUncheckedUpdateWithoutFollowedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    topSongIds?: ArtistUpdatetopSongIdsInput | string[]
    songArtists?: SongArtistUncheckedUpdateManyWithoutArtistNestedInput
    albumArtists?: AlbumArtistUncheckedUpdateManyWithoutArtistNestedInput
  }

  export type ListenLogCreateManyUserInput = {
    id?: string
    songId: string
    timestamp?: Date | string
  }

  export type FollowCreateManyUserInput = {
    id?: string
    artistId: string
  }

  export type ListenLogUpdateWithoutUserInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    song?: SongUpdateOneRequiredWithoutListenLogsNestedInput
  }

  export type ListenLogUncheckedUpdateWithoutUserInput = {
    songId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListenLogUncheckedUpdateManyWithoutUserInput = {
    songId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUpdateWithoutUserInput = {
    artist?: ArtistUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type FollowUncheckedUpdateWithoutUserInput = {
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutUserInput = {
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type SongArtistCreateManySongInput = {
    id?: string
    artistId: string
  }

  export type ListenLogCreateManySongInput = {
    id?: string
    userId: string
    timestamp?: Date | string
  }

  export type SongArtistUpdateWithoutSongInput = {
    artist?: ArtistUpdateOneRequiredWithoutSongArtistsNestedInput
  }

  export type SongArtistUncheckedUpdateWithoutSongInput = {
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type SongArtistUncheckedUpdateManyWithoutSongInput = {
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type ListenLogUpdateWithoutSongInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutListenLogsNestedInput
  }

  export type ListenLogUncheckedUpdateWithoutSongInput = {
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListenLogUncheckedUpdateManyWithoutSongInput = {
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongCreateManyAlbumInput = {
    id?: string
    name: string
    previewUrl?: string | null
  }

  export type AlbumArtistCreateManyAlbumInput = {
    id?: string
    artistId: string
  }

  export type SongUpdateWithoutAlbumInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    songArtists?: SongArtistUpdateManyWithoutSongNestedInput
    listenLogs?: ListenLogUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutAlbumInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
    songArtists?: SongArtistUncheckedUpdateManyWithoutSongNestedInput
    listenLogs?: ListenLogUncheckedUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateManyWithoutAlbumInput = {
    name?: StringFieldUpdateOperationsInput | string
    previewUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumArtistUpdateWithoutAlbumInput = {
    artist?: ArtistUpdateOneRequiredWithoutAlbumArtistsNestedInput
  }

  export type AlbumArtistUncheckedUpdateWithoutAlbumInput = {
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumArtistUncheckedUpdateManyWithoutAlbumInput = {
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type SongArtistCreateManyArtistInput = {
    id?: string
    songId: string
  }

  export type AlbumArtistCreateManyArtistInput = {
    id?: string
    albumId: string
  }

  export type FollowCreateManyArtistInput = {
    id?: string
    userId: string
  }

  export type SongArtistUpdateWithoutArtistInput = {
    song?: SongUpdateOneRequiredWithoutSongArtistsNestedInput
  }

  export type SongArtistUncheckedUpdateWithoutArtistInput = {
    songId?: StringFieldUpdateOperationsInput | string
  }

  export type SongArtistUncheckedUpdateManyWithoutArtistInput = {
    songId?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumArtistUpdateWithoutArtistInput = {
    album?: AlbumUpdateOneRequiredWithoutAlbumArtistsNestedInput
  }

  export type AlbumArtistUncheckedUpdateWithoutArtistInput = {
    albumId?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumArtistUncheckedUpdateManyWithoutArtistInput = {
    albumId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUpdateWithoutArtistInput = {
    user?: UserUpdateOneRequiredWithoutFollowsNestedInput
  }

  export type FollowUncheckedUpdateWithoutArtistInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutArtistInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}